
// wasm$(
//   ;; Import the required fd_write WASI function which will write the given io vectors to stdout
//   ;; The function signature for fd_write is:
//   ;; (File Descriptor, *iovs, iovs_len, nwritten) -> Returns number of bytes written
//   (import "wasi_unstable" "fd_write" (func $fd_write (param i32 i32 i32 i32) (result i32)))
// 
//   (memory 1)
//   (export "memory" (memory 0))
// 
//   ;; The main memory stack. 1MiB reserved
//   (global $stack_ptr (mut i32) (i32.const 65536))
// 
//   ;; A place to write values that don't matter.
//   (global $dev$null (mut i32) (i64.const 65544))
// 
//   ;; Stack allocator which grows the stack down.
//   (func $stack_alloc
//         (param $size i32)
//         (result i32)
//     (local $return_ptr i32)
//     (i32.sub
//       (get_global $stack_ptr)
//       (get_local $size)
//     )
//     tee_local $ptr_return
//     set_global $ptr_return
//     get_local $return_ptr
//   )
// 
//   (func $stack_free
//       (param $size i32)
//     (set_global $memstack_ptr
//       (i32.add
//         (get_global $stack_ptr)
//         (get_local $size)
//       )
//     )
//   )
// 
//   ;; Types
//   (;;;CODE
//     package core.collect;
// 
//     struct String {
//       own mut data [core.collect.Slice[core.primitive.u8]];
//     }
// 
//     struct "Slice[core.primitive.u8]" {
//       own mut data [ptr];
//       own mut length [usize];
//       own mut size [usize];
//     }
//   );
//   (set_global $global$struct_offset$std.collect$String$data.data (i32.const 0))
//   (set_global $global$struct_offset$std.collect$String$data.length (i32.const 4))
//   (set_global $global$struct_offset$std.collect$String$data.size (i32.const 8))
// )
// 
// // const HELLO [String] = "hello world\n";
// wasm$(
//   ;; Write 'hello world\n' to memory at an offset of 8 bytes
//   ;; Note the trailing newline which is required for the text to appear
// 
//   (set_global $global$value_ptr$main$HELLO (i32.const 0))
//   (data (i32.const 0) (i32.const 8))     // start of "string"
//   (data (i32.const 4) (i32.const 12))    // length of string
//   (data (i32.const 8) (i32.const 12))    // size of string
//   (data (i32.const 12) "hello world\n")  // string data
// )
// 
// fn fdWriteString{fd [i32]; s [String]} -> {nwritten [i32]} (
//   let nwritten [i32] = wasm$(
//     ;; iov.iov_base - This is a pointer to the start of the string
//     (i32.store (local.get $local$) (local.get $ref$s)) 
// 
//     ;; iov.iov_len - The length of the 'hello world\n' string
//     (i32.store (i32.const 4) (i32.const 12))
// 
//     (call $fd_write
//         ;; file_descriptor - 1 for stdout
//         (get_local $inp$i32$fd)
// 
//         ;; *iovs - The pointer to the iov array
//         (i32.add 
//           (get_local $inp$value_ptr$s)
//           (get_global $global$struct_offset$std.collect$String$data.data)
//         )
// 
//         ;; iovs_len - We're printing 1 string stored in an iov - so one.
//         (i32.const 1) 
// 
//         ;; nwritten - A place in memory to store the number of bytes written
//         ;; Note: also returned on the stack
//         (get_global $dev$null)
//     )
//   );
//   return {nwritten=nwritten};
// )
// 

let const HELLO [StrSlice] = "Hello world!";

fn main{} (
  fdWriteString {
    fd = 1; // stdout
    str = HELLO;
  };
)
