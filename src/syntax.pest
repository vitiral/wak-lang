WHITESPACE = _{ " " | "\t" | "\n" | "\r\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

file = _{
  SOI
  ~ (declare ~ ";"?)*
  ~ EOI
}

expr = { expr_item ~ (operator ~ expr_item)* }

expr_item = { value | closed | declare | iden }

////////////////
// Operations

ACCESS      = { "." }
CALL        = { "$" }

operator = _{ ACCESS | CALL }

////////////////
// Keywords
LET = { "let" }
VISIBILITY = { "pub" }
OWNERSHIP = { "const" | "own" | "&" | "excl" }
END = { ";" }

///////////////////
// Identifiers
iden = @{ (!(ASCII_DIGIT) ~ iden_char) ~ iden_char* }
iden_char = @{ "_" | ASCII_ALPHANUMERIC }

////////////////
// Value Literals
value = { bool | float | integer | char | string | raw_string }

bool = { "true" | "false" }

float = @{
  ("+"|"-")?
  ~ ASCII_DIGIT ~ DIGIT*
  ~ "." ~  DIGIT*
  ~ (^"e" ~ ("-"|"+")? ~ DIGIT+)?
}

integer = @{
  ("+" | "-")?
  ~ (
    "0x" ~ DIGIT_HEX+
    | ASCII_DIGIT ~ DIGIT*
  )
}

char = {
  "'" ~ string_char ~ "'"
}

raw_string = ${
  "''" ~ PUSH("'"*)  // push the number of `'` onto the stack
  ~ raw_string_inner
  ~ "''" ~ POP
}

raw_string_inner = @{
  (
    // Consume any character unless the next
    // characters are the correct number of single-quotes
    !("''" ~ PEEK)
    ~ ANY
  )
}

string = ${
  "\"" ~ string_inner ~ "\""
}

string_inner = @{ string_char* }
string_char = @{
  !("\"" | "\\") ~ ANY
  | "\\" ~ ("\\" | "\"" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

DIGIT = @{ASCII_DIGIT | "_"}
DIGIT_HEX = @{ASCII_HEX_DIGIT | "_"}

////////////////
// Declaration

declare = { declare_fn /*| declare_struct | declare_interface | declare_impl*/ | declare_var }
declare_fn = { "fn" ~ VISIBILITY? ~ iden ~ data ~ ("->" ~ data)? ~ block }
declare_var = { 
  LET? ~ VISIBILITY? ~ OWNERSHIP* ~ iden ~ type_? ~ ("=" ~ OWNERSHIP* ~ expr)?
}

////////////////
// Closed Expressions

closed = { block | data | type_ }

block = { 
   "(" ~ (expr ~ END)* ~ (expr ~ END?)? ~ ")"
}

data = { "{" ~ (declare_var  ~ ";")* ~ (declare_var ~ ";"?)? ~ "}" }

type_ = { "[" ~ type_inner ~ "]" }
type_inner = { (expr ~ type_? ~ ";")* ~ expr ~ type_? ~ ";"?  }
