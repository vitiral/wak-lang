WHITESPACE = _{ " " | "\t" | "\n" | "\r\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

file = _{
  SOI
  ~ (expr ~ ";")*
  ~ EOI
}

////////////////
// Expression

expr = { 
  expr_item ~ (
    operation
    | expand1
    | expand2
  )?
}

expr_item = { value | closed | declare | INFER | name | type_ | arbitrary }

////////////////
// Operation

operation = { operator ~ expr }

ACCESS      = { "." }
CALL        = { "$" }
EXPAND1     = _{ "!" }
EXPAND2     = _{ "!!" }

operator = _{ ACCESS | CALL }
expand1 = { EXPAND1 ~ expr }
// Note: arbitrary not actually allowed in first item.
expand2 = { EXPAND2 ~ expr_item ~ expr }

////////////////
// Keywords

LET = { "let" }
VISIBILITY = { "pub" }
OWN = { "const" | "own" }
REF =  { "ref" | "excl" }
END = { ";" }
INFER = { "_" }

///////////////////
// Identifiers

iden = @{ (!(ASCII_DIGIT) ~ iden_char) ~ iden_char* }
iden_char = @{ "_" | ASCII_ALPHANUMERIC }

////////////////
// Value Literals

value = { bool | float | integer | raw_string | string | char }

bool = { "true" | "false" }

float = @{
  ("+"|"-")?
  ~ ASCII_DIGIT ~ DIGIT*
  ~ "." ~  DIGIT*
  ~ (^"e" ~ ("-"|"+")? ~ DIGIT+)?
}

integer = @{
  ("+" | "-")?
  ~ (
    "0x" ~ DIGIT_HEX+
    | ASCII_DIGIT ~ DIGIT*
  )
}

char = {
  "'" ~ !("'") ~ string_char ~ "'"
}

raw_string = ${
  "''" ~ PUSH("'"*) // push the number of `'` onto the stack
  ~ raw_string_inner
  ~ "''" ~ POP
}

raw_string_inner = @{ raw_string_char* }
raw_string_char = @{
  // Consume any character unless the next
  // characters are the correct number of single-quotes
  !("''" ~ PEEK) ~ ANY
}

string = ${
  "\"" ~ string_inner ~ "\""
}

string_inner = @{ string_char* }
string_char = @{
  !("\"" | "\\") ~ ANY
  | "\\" ~ ("\\" | "\"" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

DIGIT = @{ASCII_DIGIT | "_"}
DIGIT_HEX = @{ASCII_HEX_DIGIT | "_"}

////////////////
// Declaration

declare = {
  declare_alias
  | declare_struct
  | declare_enum
  | declare_fn
  | declare_var
}
declare_alias = {
  "alias" ~ name ~ ":" ~ expr
}
declare_fn = { VISIBILITY? ~ "fn" ~ name ~ data ~ ("->" ~ data)? ~ block }
declare_struct = { VISIBILITY? ~ "struct" ~ name ~ data }
declare_enum = { VISIBILITY? ~ "enum" ~ name ~ data }

declare_var = { 
  LET ~ name ~ (":" ~ expr)? ~ ("=" ~ expr)?
  | name ~ ( ":" ~ expr)? ~ "=" ~ expr

  // struct declarations
  | VISIBILITY? ~ name ~ ":" ~ expr ~ ("=" ~ expr)?
}

////////////////
// Type

name = { iden ~ ("[" ~ (REF? ~ name ~ END)* ~ (REF? ~ name ~ END?)? ~ "]")? }
type_ = { (OWN | REF) ~ name }

////////////////
// Closed Expressions

closed = { block | array | name_block | data }

block = { 
    "(" ~ (expr ~ END)* ~ (expr ~ END?)? ~ ")"
}

array = {
    "[" ~ integer ~ END ~ type_ ~ END? ~ "]"
}

// Note: has syntactic restrictions:
// - Only simple declare, i.e. A=B or A=B!() etc
// - Else only iden, name or expansions (to name or iden) allowed
name_block = { 
    "[" ~ (expr ~ END)* ~ (expr ~ END?)? ~ "]" 
}

data = { 
    "{" ~ (declare_var  ~ ";")* ~ (declare_var ~ ";"?)? ~ "}" 
}

arbitrary = { "#(" ~ arbitrary_inner* ~ ")#" }
arbitrary_inner = _{ value | arbitrary | arbitrary_token }
arbitrary_token = @{ !("#(" | ")#") ~ ANY }

