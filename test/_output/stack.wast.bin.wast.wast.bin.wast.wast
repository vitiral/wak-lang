(module
  (type $0 (func (param i64) (result i64)))
  (func $0
    (type 0)
    (local i64 i64)
    (local.get 0)
    (local.set 1)
    (i64.const 1)
    (local.set 2)
    (block
      (loop
        (local.get 1)
        (i64.const 0)
        (i64.eq)
        (if
          (then (br 2))
          (else
            (local.get 1)
            (local.get 2)
            (i64.mul)
            (local.set 2)
            (local.get 1)
            (i64.const 1)
            (i64.sub)
            (local.set 1)
          )
        )
        (br 0)
      )
    )
    (local.get 2)
  )
  (func $1
    (type 0)
    (local i64 i64)
    (local.get 0)
    (local.set 1)
    (i64.const 1)
    (local.set 2)
    (block
      (loop
        (local.get 1)
        (i64.const 0)
        (i64.eq)
        (if
          (then (br 2))
          (else
            (local.get 1)
            (local.get 2)
            (i64.mul)
            (local.set 2)
            (local.get 1)
            (i64.const 1)
            (i64.sub)
            (local.set 1)
          )
        )
        (br 0)
      )
    )
    (local.get 2)
  )
  (func $2
    (type 0)
    (local i64 i64)
    (local.get 0)
    (local.set 1)
    (i64.const 1)
    (local.set 2)
    (block
      (loop
        (local.get 1)
        (i64.const 0)
        (i64.eq)
        (if
          (then (br 2))
          (else
            (local.get 1)
            (local.get 2)
            (i64.mul)
            (local.set 2)
            (local.get 1)
            (i64.const 1)
            (i64.sub)
            (local.set 1)
          )
        )
        (br 0)
      )
    )
    (local.get 2)
  )
  (func $3
    (type 0)
    (local i64 i64)
    (local.get 0)
    (local.set 1)
    (i64.const 1)
    (local.set 2)
    (block
      (loop
        (local.get 1)
        (i64.const 0)
        (i64.eq)
        (if
          (then (br 2))
          (else
            (local.get 1)
            (local.get 2)
            (i64.mul)
            (local.set 2)
            (local.get 1)
            (i64.const 1)
            (i64.sub)
            (local.set 1)
          )
        )
        (br 0)
      )
    )
    (local.get 2)
  )
  (func $4
    (type 0)
    (local i64 i64)
    (local.get 0)
    (local.set 1)
    (i64.const 1)
    (local.set 2)
    (block
      (loop
        (local.get 1)
        (i64.const 0)
        (i64.eq)
        (if
          (then (br 2))
          (else
            (local.get 1)
            (local.get 2)
            (i64.mul)
            (local.set 2)
            (local.get 1)
            (i64.const 1)
            (i64.sub)
            (local.set 1)
          )
        )
        (br 0)
      )
    )
    (local.get 2)
  )
  (export "fac-expr" (func 0))
  (export "fac-stack" (func 1))
  (export "fac-stack-raw" (func 2))
  (export "fac-mixed" (func 3))
  (export "fac-mixed-raw" (func 4))
)
(assert_return
  (invoke "fac-expr" (i64.const 25))
  (i64.const 7_034_535_277_573_963_776)
)
(assert_return
  (invoke "fac-stack" (i64.const 25))
  (i64.const 7_034_535_277_573_963_776)
)
(assert_return
  (invoke "fac-mixed" (i64.const 25))
  (i64.const 7_034_535_277_573_963_776)
)
(module
  (type $0 (func))
  (type $1 (func (result i32)))
  (type $2 (func (param i32)))
  (table $0 1 funcref)
  (func $0
    (type 0)
    (block (i32.const 0) (call_indirect (type 0)))
    (loop (i32.const 0) (call_indirect (type 0)))
    (i32.const 0)
    (if (then (i32.const 0) (call_indirect (type 0))) (else))
    (i32.const 0)
    (if
      (then (i32.const 0) (call_indirect (type 0)))
      (else (i32.const 0) (call_indirect (type 0)))
    )
    (block (i32.const 0) (call_indirect (type 0)))
    (loop (i32.const 0) (call_indirect (type 0)))
    (i32.const 0)
    (if (then (i32.const 0) (call_indirect (type 0))) (else))
    (i32.const 0)
    (if
      (then (i32.const 0) (call_indirect (type 0)))
      (else (i32.const 0) (call_indirect (type 0)))
    )
    (block (i32.const 0) (i32.const 0) (call_indirect (type 2)))
    (loop (i32.const 0) (i32.const 0) (call_indirect (type 2)))
    (i32.const 0)
    (if (then (i32.const 0) (i32.const 0) (call_indirect (type 2))) (else))
    (i32.const 0)
    (if
      (then (i32.const 0) (i32.const 0) (call_indirect (type 2)))
      (else (i32.const 0) (i32.const 0) (call_indirect (type 2)))
    )
    (block (result i32) (i32.const 0) (call_indirect (type 1)))
    (drop)
    (loop (result i32) (i32.const 0) (call_indirect (type 1)))
    (drop)
    (i32.const 0)
    (if
      (result i32)
      (then (i32.const 0) (call_indirect (type 1)))
      (else (i32.const 0) (call_indirect (type 1)))
    )
    (drop)
    (block (i32.const 0) (call_indirect (type 0)))
    (loop (i32.const 0) (call_indirect (type 0)))
    (i32.const 0)
    (if (then (i32.const 0) (call_indirect (type 0))) (else))
    (i32.const 0)
    (if
      (then (i32.const 0) (call_indirect (type 0)))
      (else (i32.const 0) (call_indirect (type 0)))
    )
    (block (i32.const 0) (call_indirect (type 0)))
    (loop (i32.const 0) (call_indirect (type 0)))
    (i32.const 0)
    (if (then (i32.const 0) (call_indirect (type 0))) (else))
    (i32.const 0)
    (if
      (then (i32.const 0) (call_indirect (type 0)))
      (else (i32.const 0) (call_indirect (type 0)))
    )
    (block (i32.const 0) (call_indirect (type 0)))
    (loop (i32.const 0) (call_indirect (type 0)))
    (i32.const 0)
    (if (then (i32.const 0) (call_indirect (type 0))) (else))
    (i32.const 0)
    (if
      (then (i32.const 0) (call_indirect (type 0)))
      (else (i32.const 0) (call_indirect (type 0)))
    )
    (block (i32.const 0) (i32.const 0) (call_indirect (type 2)))
    (loop (i32.const 0) (i32.const 0) (call_indirect (type 2)))
    (i32.const 0)
    (if (then (i32.const 0) (i32.const 0) (call_indirect (type 2))) (else))
    (i32.const 0)
    (if
      (then (i32.const 0) (i32.const 0) (call_indirect (type 2)))
      (else (i32.const 0) (i32.const 0) (call_indirect (type 2)))
    )
    (block (result i32) (i32.const 0) (call_indirect (type 1)))
    (drop)
    (loop (result i32) (i32.const 0) (call_indirect (type 1)))
    (drop)
    (i32.const 0)
    (if
      (result i32)
      (then (i32.const 0) (call_indirect (type 1)))
      (else (i32.const 0) (call_indirect (type 1)))
    )
    (drop)
    (block (i32.const 0) (call_indirect (type 0)))
    (loop (i32.const 0) (call_indirect (type 0)))
    (i32.const 0)
    (if (then (i32.const 0) (call_indirect (type 0))) (else))
    (i32.const 0)
    (if
      (then (i32.const 0) (call_indirect (type 0)))
      (else (i32.const 0) (call_indirect (type 0)))
    )
    (i32.const 0)
    (call_indirect (type 0))
  )
)
