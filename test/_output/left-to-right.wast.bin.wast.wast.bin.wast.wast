(module
  (type $0 (func (param i32 i32) (result i32)))
  (type $1 (func (param i64 i64) (result i32)))
  (type $2 (func (param f32 f32) (result i32)))
  (type $3 (func (param f64 f64) (result i32)))
  (type $4 (func))
  (type $5 (func (result i32)))
  (type $6 (func (result i64)))
  (type $7 (func (result f32)))
  (type $8 (func (result f64)))
  (type $9 (func (param i32 i32)))
  (type $10 (func (param i64 i64)))
  (type $11 (func (param f32 f32)))
  (type $12 (func (param f64 f64)))
  (table $0 8 8 funcref)
  (memory $0 1)
  (func $0 (type 0) (i32.const -1))
  (func $1 (type 0) (i32.const -2))
  (func $2 (type 1) (i32.const -1))
  (func $3 (type 1) (i32.const -2))
  (func $4 (type 2) (i32.const -1))
  (func $5 (type 2) (i32.const -2))
  (func $6 (type 3) (i32.const -1))
  (func $7 (type 3) (i32.const -2))
  (func $8 (type 4) (i32.const 8) (i32.const 0) (i32.store))
  (func $9
    (type 4)
    (i32.const 11)
    (i32.const 10)
    (i32.load8_u)
    (i32.store8)
    (i32.const 10)
    (i32.const 9)
    (i32.load8_u)
    (i32.store8)
    (i32.const 9)
    (i32.const 8)
    (i32.load8_u)
    (i32.store8)
    (i32.const 8)
    (i32.const -3)
    (i32.store8)
  )
  (func $10 (type 5) (i32.const 8) (i32.load))
  (func $11
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 1)
    (i32.store8)
    (i32.const 0)
  )
  (func $12
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 2)
    (i32.store8)
    (i32.const 1)
  )
  (func $13
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 3)
    (i32.store8)
    (i32.const 1)
  )
  (func $14
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 4)
    (i32.store8)
    (i32.const 0)
  )
  (func $15
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 5)
    (i32.store8)
    (i32.const 0)
  )
  (func $16
    (type 6)
    (call 9)
    (i32.const 8)
    (i32.const 1)
    (i32.store8)
    (i64.const 0)
  )
  (func $17
    (type 6)
    (call 9)
    (i32.const 8)
    (i32.const 2)
    (i32.store8)
    (i64.const 1)
  )
  (func $18
    (type 6)
    (call 9)
    (i32.const 8)
    (i32.const 3)
    (i32.store8)
    (i64.const 1)
  )
  (func $19
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 4)
    (i32.store8)
    (i32.const 2)
  )
  (func $20
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 5)
    (i32.store8)
    (i32.const 0)
  )
  (func $21
    (type 7)
    (call 9)
    (i32.const 8)
    (i32.const 1)
    (i32.store8)
    (f32.const 0)
  )
  (func $22
    (type 7)
    (call 9)
    (i32.const 8)
    (i32.const 2)
    (i32.store8)
    (f32.const 1)
  )
  (func $23
    (type 7)
    (call 9)
    (i32.const 8)
    (i32.const 3)
    (i32.store8)
    (f32.const 1)
  )
  (func $24
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 4)
    (i32.store8)
    (i32.const 4)
  )
  (func $25
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 5)
    (i32.store8)
    (i32.const 0)
  )
  (func $26
    (type 8)
    (call 9)
    (i32.const 8)
    (i32.const 1)
    (i32.store8)
    (f64.const 0)
  )
  (func $27
    (type 8)
    (call 9)
    (i32.const 8)
    (i32.const 2)
    (i32.store8)
    (f64.const 1)
  )
  (func $28
    (type 8)
    (call 9)
    (i32.const 8)
    (i32.const 3)
    (i32.store8)
    (f64.const 1)
  )
  (func $29
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 4)
    (i32.store8)
    (i32.const 6)
  )
  (func $30
    (type 5)
    (call 9)
    (i32.const 8)
    (i32.const 5)
    (i32.store8)
    (i32.const 0)
  )
  (func $31 (type 9))
  (func $32 (type 10))
  (func $33 (type 11))
  (func $34 (type 12))
  (func $35 (type 5) (call 8) (call 11) (call 12) (i32.add) (drop) (call 10))
  (func $36 (type 5) (call 8) (call 11) (call 12) (i32.sub) (drop) (call 10))
  (func $37 (type 5) (call 8) (call 11) (call 12) (i32.mul) (drop) (call 10))
  (func $38 (type 5) (call 8) (call 11) (call 12) (i32.div_s) (drop) (call 10))
  (func $39 (type 5) (call 8) (call 11) (call 12) (i32.div_u) (drop) (call 10))
  (func $40 (type 5) (call 8) (call 11) (call 12) (i32.rem_s) (drop) (call 10))
  (func $41 (type 5) (call 8) (call 11) (call 12) (i32.rem_u) (drop) (call 10))
  (func $42 (type 5) (call 8) (call 11) (call 12) (i32.and) (drop) (call 10))
  (func $43 (type 5) (call 8) (call 11) (call 12) (i32.or) (drop) (call 10))
  (func $44 (type 5) (call 8) (call 11) (call 12) (i32.xor) (drop) (call 10))
  (func $45 (type 5) (call 8) (call 11) (call 12) (i32.shl) (drop) (call 10))
  (func $46 (type 5) (call 8) (call 11) (call 12) (i32.shr_u) (drop) (call 10))
  (func $47 (type 5) (call 8) (call 11) (call 12) (i32.shr_s) (drop) (call 10))
  (func $48 (type 5) (call 8) (call 11) (call 12) (i32.eq) (drop) (call 10))
  (func $49 (type 5) (call 8) (call 11) (call 12) (i32.ne) (drop) (call 10))
  (func $50 (type 5) (call 8) (call 11) (call 12) (i32.lt_s) (drop) (call 10))
  (func $51 (type 5) (call 8) (call 11) (call 12) (i32.le_s) (drop) (call 10))
  (func $52 (type 5) (call 8) (call 11) (call 12) (i32.lt_u) (drop) (call 10))
  (func $53 (type 5) (call 8) (call 11) (call 12) (i32.le_u) (drop) (call 10))
  (func $54 (type 5) (call 8) (call 11) (call 12) (i32.gt_s) (drop) (call 10))
  (func $55 (type 5) (call 8) (call 11) (call 12) (i32.ge_s) (drop) (call 10))
  (func $56 (type 5) (call 8) (call 11) (call 12) (i32.gt_u) (drop) (call 10))
  (func $57 (type 5) (call 8) (call 11) (call 12) (i32.ge_u) (drop) (call 10))
  (func $58 (type 5) (call 8) (call 11) (call 12) (i32.store) (call 10))
  (func $59 (type 5) (call 8) (call 11) (call 12) (i32.store8) (call 10))
  (func $60 (type 5) (call 8) (call 11) (call 12) (i32.store16) (call 10))
  (func $61 (type 5) (call 8) (call 11) (call 12) (call 31) (call 10))
  (func $62
    (type 5)
    (call 8)
    (call 11)
    (call 12)
    (call 14)
    (call_indirect (type 0))
    (drop)
    (call 10)
  )
  (func $63
    (type 5)
    (call 8)
    (call 11)
    (call 12)
    (call 15)
    (select)
    (drop)
    (call 10)
  )
  (func $64 (type 5) (call 8) (call 16) (call 17) (i64.add) (drop) (call 10))
  (func $65 (type 5) (call 8) (call 16) (call 17) (i64.sub) (drop) (call 10))
  (func $66 (type 5) (call 8) (call 16) (call 17) (i64.mul) (drop) (call 10))
  (func $67 (type 5) (call 8) (call 16) (call 17) (i64.div_s) (drop) (call 10))
  (func $68 (type 5) (call 8) (call 16) (call 17) (i64.div_u) (drop) (call 10))
  (func $69 (type 5) (call 8) (call 16) (call 17) (i64.rem_s) (drop) (call 10))
  (func $70 (type 5) (call 8) (call 16) (call 17) (i64.rem_u) (drop) (call 10))
  (func $71 (type 5) (call 8) (call 16) (call 17) (i64.and) (drop) (call 10))
  (func $72 (type 5) (call 8) (call 16) (call 17) (i64.or) (drop) (call 10))
  (func $73 (type 5) (call 8) (call 16) (call 17) (i64.xor) (drop) (call 10))
  (func $74 (type 5) (call 8) (call 16) (call 17) (i64.shl) (drop) (call 10))
  (func $75 (type 5) (call 8) (call 16) (call 17) (i64.shr_u) (drop) (call 10))
  (func $76 (type 5) (call 8) (call 16) (call 17) (i64.shr_s) (drop) (call 10))
  (func $77 (type 5) (call 8) (call 16) (call 17) (i64.eq) (drop) (call 10))
  (func $78 (type 5) (call 8) (call 16) (call 17) (i64.ne) (drop) (call 10))
  (func $79 (type 5) (call 8) (call 16) (call 17) (i64.lt_s) (drop) (call 10))
  (func $80 (type 5) (call 8) (call 16) (call 17) (i64.le_s) (drop) (call 10))
  (func $81 (type 5) (call 8) (call 16) (call 17) (i64.lt_u) (drop) (call 10))
  (func $82 (type 5) (call 8) (call 16) (call 17) (i64.le_u) (drop) (call 10))
  (func $83 (type 5) (call 8) (call 16) (call 17) (i64.gt_s) (drop) (call 10))
  (func $84 (type 5) (call 8) (call 16) (call 17) (i64.ge_s) (drop) (call 10))
  (func $85 (type 5) (call 8) (call 16) (call 17) (i64.gt_u) (drop) (call 10))
  (func $86 (type 5) (call 8) (call 16) (call 17) (i64.ge_u) (drop) (call 10))
  (func $87 (type 5) (call 8) (call 11) (call 17) (i64.store) (call 10))
  (func $88 (type 5) (call 8) (call 11) (call 17) (i64.store8) (call 10))
  (func $89 (type 5) (call 8) (call 11) (call 17) (i64.store16) (call 10))
  (func $90 (type 5) (call 8) (call 11) (call 17) (i64.store32) (call 10))
  (func $91 (type 5) (call 8) (call 16) (call 17) (call 32) (call 10))
  (func $92
    (type 5)
    (call 8)
    (call 16)
    (call 17)
    (call 19)
    (call_indirect (type 1))
    (drop)
    (call 10)
  )
  (func $93
    (type 5)
    (call 8)
    (call 16)
    (call 17)
    (call 20)
    (select)
    (drop)
    (call 10)
  )
  (func $94 (type 5) (call 8) (call 21) (call 22) (f32.add) (drop) (call 10))
  (func $95 (type 5) (call 8) (call 21) (call 22) (f32.sub) (drop) (call 10))
  (func $96 (type 5) (call 8) (call 21) (call 22) (f32.mul) (drop) (call 10))
  (func $97 (type 5) (call 8) (call 21) (call 22) (f32.div) (drop) (call 10))
  (func $98
    (type 5)
    (call 8)
    (call 21)
    (call 22)
    (f32.copysign)
    (drop)
    (call 10)
  )
  (func $99 (type 5) (call 8) (call 21) (call 22) (f32.eq) (drop) (call 10))
  (func $100 (type 5) (call 8) (call 21) (call 22) (f32.ne) (drop) (call 10))
  (func $101 (type 5) (call 8) (call 21) (call 22) (f32.lt) (drop) (call 10))
  (func $102 (type 5) (call 8) (call 21) (call 22) (f32.le) (drop) (call 10))
  (func $103 (type 5) (call 8) (call 21) (call 22) (f32.gt) (drop) (call 10))
  (func $104 (type 5) (call 8) (call 21) (call 22) (f32.ge) (drop) (call 10))
  (func $105 (type 5) (call 8) (call 21) (call 22) (f32.min) (drop) (call 10))
  (func $106 (type 5) (call 8) (call 21) (call 22) (f32.max) (drop) (call 10))
  (func $107 (type 5) (call 8) (call 11) (call 22) (f32.store) (call 10))
  (func $108 (type 5) (call 8) (call 21) (call 22) (call 33) (call 10))
  (func $109
    (type 5)
    (call 8)
    (call 21)
    (call 22)
    (call 24)
    (call_indirect (type 2))
    (drop)
    (call 10)
  )
  (func $110
    (type 5)
    (call 8)
    (call 21)
    (call 22)
    (call 25)
    (select)
    (drop)
    (call 10)
  )
  (func $111 (type 5) (call 8) (call 26) (call 27) (f64.add) (drop) (call 10))
  (func $112 (type 5) (call 8) (call 26) (call 27) (f64.sub) (drop) (call 10))
  (func $113 (type 5) (call 8) (call 26) (call 27) (f64.mul) (drop) (call 10))
  (func $114 (type 5) (call 8) (call 26) (call 27) (f64.div) (drop) (call 10))
  (func $115
    (type 5)
    (call 8)
    (call 26)
    (call 27)
    (f64.copysign)
    (drop)
    (call 10)
  )
  (func $116 (type 5) (call 8) (call 26) (call 27) (f64.eq) (drop) (call 10))
  (func $117 (type 5) (call 8) (call 26) (call 27) (f64.ne) (drop) (call 10))
  (func $118 (type 5) (call 8) (call 26) (call 27) (f64.lt) (drop) (call 10))
  (func $119 (type 5) (call 8) (call 26) (call 27) (f64.le) (drop) (call 10))
  (func $120 (type 5) (call 8) (call 26) (call 27) (f64.gt) (drop) (call 10))
  (func $121 (type 5) (call 8) (call 26) (call 27) (f64.ge) (drop) (call 10))
  (func $122 (type 5) (call 8) (call 26) (call 27) (f64.min) (drop) (call 10))
  (func $123 (type 5) (call 8) (call 26) (call 27) (f64.max) (drop) (call 10))
  (func $124 (type 5) (call 8) (call 11) (call 27) (f64.store) (call 10))
  (func $125 (type 5) (call 8) (call 26) (call 27) (call 34) (call 10))
  (func $126
    (type 5)
    (call 8)
    (call 26)
    (call 27)
    (call 29)
    (call_indirect (type 3))
    (drop)
    (call 10)
  )
  (func $127
    (type 5)
    (call 8)
    (call 26)
    (call 27)
    (call 30)
    (select)
    (drop)
    (call 10)
  )
  (func $128
    (type 5)
    (block
      (result i32)
      (call 8)
      (call 11)
      (call 12)
      (i32.const 0)
      (i32.and)
      (br_if 0)
      (drop)
      (call 10)
    )
  )
  (func $129
    (type 5)
    (block
      (result i32)
      (call 8)
      (block (result i32) (call 11) (call 12) (br_table 1 0))
      (drop)
      (call 10)
    )
  )
  (export "i32_add" (func 35))
  (export "i32_sub" (func 36))
  (export "i32_mul" (func 37))
  (export "i32_div_s" (func 38))
  (export "i32_div_u" (func 39))
  (export "i32_rem_s" (func 40))
  (export "i32_rem_u" (func 41))
  (export "i32_and" (func 42))
  (export "i32_or" (func 43))
  (export "i32_xor" (func 44))
  (export "i32_shl" (func 45))
  (export "i32_shr_u" (func 46))
  (export "i32_shr_s" (func 47))
  (export "i32_eq" (func 48))
  (export "i32_ne" (func 49))
  (export "i32_lt_s" (func 50))
  (export "i32_le_s" (func 51))
  (export "i32_lt_u" (func 52))
  (export "i32_le_u" (func 53))
  (export "i32_gt_s" (func 54))
  (export "i32_ge_s" (func 55))
  (export "i32_gt_u" (func 56))
  (export "i32_ge_u" (func 57))
  (export "i32_store" (func 58))
  (export "i32_store8" (func 59))
  (export "i32_store16" (func 60))
  (export "i32_call" (func 61))
  (export "i32_call_indirect" (func 62))
  (export "i32_select" (func 63))
  (export "i64_add" (func 64))
  (export "i64_sub" (func 65))
  (export "i64_mul" (func 66))
  (export "i64_div_s" (func 67))
  (export "i64_div_u" (func 68))
  (export "i64_rem_s" (func 69))
  (export "i64_rem_u" (func 70))
  (export "i64_and" (func 71))
  (export "i64_or" (func 72))
  (export "i64_xor" (func 73))
  (export "i64_shl" (func 74))
  (export "i64_shr_u" (func 75))
  (export "i64_shr_s" (func 76))
  (export "i64_eq" (func 77))
  (export "i64_ne" (func 78))
  (export "i64_lt_s" (func 79))
  (export "i64_le_s" (func 80))
  (export "i64_lt_u" (func 81))
  (export "i64_le_u" (func 82))
  (export "i64_gt_s" (func 83))
  (export "i64_ge_s" (func 84))
  (export "i64_gt_u" (func 85))
  (export "i64_ge_u" (func 86))
  (export "i64_store" (func 87))
  (export "i64_store8" (func 88))
  (export "i64_store16" (func 89))
  (export "i64_store32" (func 90))
  (export "i64_call" (func 91))
  (export "i64_call_indirect" (func 92))
  (export "i64_select" (func 93))
  (export "f32_add" (func 94))
  (export "f32_sub" (func 95))
  (export "f32_mul" (func 96))
  (export "f32_div" (func 97))
  (export "f32_copysign" (func 98))
  (export "f32_eq" (func 99))
  (export "f32_ne" (func 100))
  (export "f32_lt" (func 101))
  (export "f32_le" (func 102))
  (export "f32_gt" (func 103))
  (export "f32_ge" (func 104))
  (export "f32_min" (func 105))
  (export "f32_max" (func 106))
  (export "f32_store" (func 107))
  (export "f32_call" (func 108))
  (export "f32_call_indirect" (func 109))
  (export "f32_select" (func 110))
  (export "f64_add" (func 111))
  (export "f64_sub" (func 112))
  (export "f64_mul" (func 113))
  (export "f64_div" (func 114))
  (export "f64_copysign" (func 115))
  (export "f64_eq" (func 116))
  (export "f64_ne" (func 117))
  (export "f64_lt" (func 118))
  (export "f64_le" (func 119))
  (export "f64_gt" (func 120))
  (export "f64_ge" (func 121))
  (export "f64_min" (func 122))
  (export "f64_max" (func 123))
  (export "f64_store" (func 124))
  (export "f64_call" (func 125))
  (export "f64_call_indirect" (func 126))
  (export "f64_select" (func 127))
  (export "br_if" (func 128))
  (export "br_table" (func 129))
  (elem 0 (offset (i32.const 0)) 0 1 2 3 4 5 6 7)
)
(assert_return (invoke "i32_add") (i32.const 258))
(assert_return (invoke "i64_add") (i32.const 258))
(assert_return (invoke "i32_sub") (i32.const 258))
(assert_return (invoke "i64_sub") (i32.const 258))
(assert_return (invoke "i32_mul") (i32.const 258))
(assert_return (invoke "i64_mul") (i32.const 258))
(assert_return (invoke "i32_div_s") (i32.const 258))
(assert_return (invoke "i64_div_s") (i32.const 258))
(assert_return (invoke "i32_div_u") (i32.const 258))
(assert_return (invoke "i64_div_u") (i32.const 258))
(assert_return (invoke "i32_rem_s") (i32.const 258))
(assert_return (invoke "i64_rem_s") (i32.const 258))
(assert_return (invoke "i32_rem_u") (i32.const 258))
(assert_return (invoke "i64_rem_u") (i32.const 258))
(assert_return (invoke "i32_and") (i32.const 258))
(assert_return (invoke "i64_and") (i32.const 258))
(assert_return (invoke "i32_or") (i32.const 258))
(assert_return (invoke "i64_or") (i32.const 258))
(assert_return (invoke "i32_xor") (i32.const 258))
(assert_return (invoke "i64_xor") (i32.const 258))
(assert_return (invoke "i32_shl") (i32.const 258))
(assert_return (invoke "i64_shl") (i32.const 258))
(assert_return (invoke "i32_shr_u") (i32.const 258))
(assert_return (invoke "i64_shr_u") (i32.const 258))
(assert_return (invoke "i32_shr_s") (i32.const 258))
(assert_return (invoke "i64_shr_s") (i32.const 258))
(assert_return (invoke "i32_eq") (i32.const 258))
(assert_return (invoke "i64_eq") (i32.const 258))
(assert_return (invoke "i32_ne") (i32.const 258))
(assert_return (invoke "i64_ne") (i32.const 258))
(assert_return (invoke "i32_lt_s") (i32.const 258))
(assert_return (invoke "i64_lt_s") (i32.const 258))
(assert_return (invoke "i32_le_s") (i32.const 258))
(assert_return (invoke "i64_le_s") (i32.const 258))
(assert_return (invoke "i32_lt_u") (i32.const 258))
(assert_return (invoke "i64_lt_u") (i32.const 258))
(assert_return (invoke "i32_le_u") (i32.const 258))
(assert_return (invoke "i64_le_u") (i32.const 258))
(assert_return (invoke "i32_gt_s") (i32.const 258))
(assert_return (invoke "i64_gt_s") (i32.const 258))
(assert_return (invoke "i32_ge_s") (i32.const 258))
(assert_return (invoke "i64_ge_s") (i32.const 258))
(assert_return (invoke "i32_gt_u") (i32.const 258))
(assert_return (invoke "i64_gt_u") (i32.const 258))
(assert_return (invoke "i32_ge_u") (i32.const 258))
(assert_return (invoke "i64_ge_u") (i32.const 258))
(assert_return (invoke "i32_store") (i32.const 258))
(assert_return (invoke "i64_store") (i32.const 258))
(assert_return (invoke "i32_store8") (i32.const 258))
(assert_return (invoke "i64_store8") (i32.const 258))
(assert_return (invoke "i32_store16") (i32.const 258))
(assert_return (invoke "i64_store16") (i32.const 258))
(assert_return (invoke "i64_store32") (i32.const 258))
(assert_return (invoke "i32_call") (i32.const 258))
(assert_return (invoke "i64_call") (i32.const 258))
(assert_return (invoke "i32_call_indirect") (i32.const 66_052))
(assert_return (invoke "i64_call_indirect") (i32.const 66_052))
(assert_return (invoke "i32_select") (i32.const 66_053))
(assert_return (invoke "i64_select") (i32.const 66_053))
(assert_return (invoke "f32_add") (i32.const 258))
(assert_return (invoke "f64_add") (i32.const 258))
(assert_return (invoke "f32_sub") (i32.const 258))
(assert_return (invoke "f64_sub") (i32.const 258))
(assert_return (invoke "f32_mul") (i32.const 258))
(assert_return (invoke "f64_mul") (i32.const 258))
(assert_return (invoke "f32_div") (i32.const 258))
(assert_return (invoke "f64_div") (i32.const 258))
(assert_return (invoke "f32_copysign") (i32.const 258))
(assert_return (invoke "f64_copysign") (i32.const 258))
(assert_return (invoke "f32_eq") (i32.const 258))
(assert_return (invoke "f64_eq") (i32.const 258))
(assert_return (invoke "f32_ne") (i32.const 258))
(assert_return (invoke "f64_ne") (i32.const 258))
(assert_return (invoke "f32_lt") (i32.const 258))
(assert_return (invoke "f64_lt") (i32.const 258))
(assert_return (invoke "f32_le") (i32.const 258))
(assert_return (invoke "f64_le") (i32.const 258))
(assert_return (invoke "f32_gt") (i32.const 258))
(assert_return (invoke "f64_gt") (i32.const 258))
(assert_return (invoke "f32_ge") (i32.const 258))
(assert_return (invoke "f64_ge") (i32.const 258))
(assert_return (invoke "f32_min") (i32.const 258))
(assert_return (invoke "f64_min") (i32.const 258))
(assert_return (invoke "f32_max") (i32.const 258))
(assert_return (invoke "f64_max") (i32.const 258))
(assert_return (invoke "f32_store") (i32.const 258))
(assert_return (invoke "f64_store") (i32.const 258))
(assert_return (invoke "f32_call") (i32.const 258))
(assert_return (invoke "f64_call") (i32.const 258))
(assert_return (invoke "f32_call_indirect") (i32.const 66_052))
(assert_return (invoke "f64_call_indirect") (i32.const 66_052))
(assert_return (invoke "f32_select") (i32.const 66_053))
(assert_return (invoke "f64_select") (i32.const 66_053))
(assert_return (invoke "br_if") (i32.const 258))
(assert_return (invoke "br_table") (i32.const 258))
