(module
  (type $0 (func (param i32 i32) (result i32)))
  (type $1 (func))
  (type $2 (func (param i32 i32 i32) (result i32)))
  (type $3 (func (param i64 i64 i32) (result i64)))
  (type $4 (func (param f32 f32 i32) (result f32)))
  (type $5 (func (param f64 f64 i32) (result f64)))
  (type $6 (func (param i32) (result i32)))
  (type $7 (func (param i32)))
  (table $0 1 1 funcref)
  (memory $0 1)
  (global $0 (mut i32) (i32.const 10))
  (func $0 (type 1))
  (func $1 (type 2) (local.get 0) (local.get 1) (local.get 2) (select))
  (func $2 (type 3) (local.get 0) (local.get 1) (local.get 2) (select))
  (func $3 (type 4) (local.get 0) (local.get 1) (local.get 2) (select))
  (func $4 (type 5) (local.get 0) (local.get 1) (local.get 2) (select))
  (func $5 (type 6) (unreachable) (i32.const 0) (local.get 0) (select))
  (func $6 (type 6) (i32.const 0) (unreachable) (local.get 0) (select))
  (func $7
    (type 1)
    (unreachable)
    (select)
    (unreachable)
    (i32.const 0)
    (select)
    (unreachable)
    (i32.const 0)
    (i32.const 0)
    (select)
    (unreachable)
    (f32.const 0)
    (i32.const 0)
    (select)
    (unreachable)
  )
  (func $8
    (type 6)
    (i32.const 0)
    (i32.const 1)
    (local.get 0)
    (select)
    (i32.const 2)
    (i32.const 3)
    (select)
  )
  (func $9
    (type 6)
    (i32.const 2)
    (i32.const 0)
    (i32.const 1)
    (local.get 0)
    (select)
    (i32.const 3)
    (select)
  )
  (func $10
    (type 6)
    (i32.const 2)
    (i32.const 3)
    (i32.const 0)
    (i32.const 1)
    (local.get 0)
    (select)
    (select)
  )
  (func $11
    (type 6)
    (loop
      (result i32)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (call 0)
      (call 0)
    )
  )
  (func $12
    (type 6)
    (loop
      (result i32)
      (call 0)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (call 0)
    )
  )
  (func $13
    (type 6)
    (loop
      (result i32)
      (call 0)
      (call 0)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
    )
  )
  (func $14
    (type 7)
    (i32.const 2)
    (i32.const 3)
    (local.get 0)
    (select)
    (if (then (call 0)) (else))
  )
  (func $15
    (type 6)
    (i32.const 1)
    (if
      (result i32)
      (then (i32.const 2) (i32.const 3) (local.get 0) (select))
      (else (i32.const 4))
    )
  )
  (func $16
    (type 6)
    (i32.const 0)
    (if
      (result i32)
      (then (i32.const 2))
      (else (i32.const 2) (i32.const 3) (local.get 0) (select))
    )
  )
  (func $17
    (type 6)
    (block
      (result i32)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (i32.const 4)
      (br_if 0)
    )
  )
  (func $18
    (type 6)
    (block
      (result i32)
      (i32.const 2)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (br_if 0)
    )
  )
  (func $19
    (type 6)
    (block
      (result i32)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (i32.const 2)
      (br_table 0 0)
    )
  )
  (func $20
    (type 6)
    (block
      (result i32)
      (i32.const 2)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (br_table 0 0)
    )
  )
  (func $21 (type 0) (local.get 0))
  (func $22
    (type 6)
    (block
      (result i32)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (i32.const 1)
      (i32.const 0)
      (call_indirect (type 0))
    )
  )
  (func $23
    (type 6)
    (block
      (result i32)
      (i32.const 1)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (i32.const 0)
      (call_indirect (type 0))
    )
  )
  (func $24
    (type 6)
    (block
      (result i32)
      (i32.const 1)
      (i32.const 4)
      (i32.const 2)
      (i32.const 3)
      (local.get 0)
      (select)
      (call_indirect (type 0))
    )
  )
  (func $25
    (type 7)
    (i32.const 0)
    (i32.const 4)
    (local.get 0)
    (select)
    (i32.const 1)
    (i32.store)
  )
  (func $26
    (type 7)
    (i32.const 8)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (i32.store)
  )
  (func $27
    (type 6)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (memory.grow)
  )
  (func $28 (type 6) (local.get 0))
  (func $29
    (type 6)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (call 28)
  )
  (func $30
    (type 6)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (return)
  )
  (func $31 (type 7) (i32.const 1) (i32.const 2) (local.get 0) (select) (drop))
  (func $32
    (type 6)
    (block
      (result i32)
      (i32.const 1)
      (i32.const 2)
      (local.get 0)
      (select)
      (br 0)
    )
  )
  (func $33
    (type 6)
    (local i32)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (local.set 0)
    (local.get 0)
  )
  (func $34
    (type 6)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (local.tee 0)
  )
  (func $35
    (type 6)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (global.set 0)
    (global.get 0)
  )
  (func $36
    (type 6)
    (i32.const 0)
    (i32.const 4)
    (local.get 0)
    (select)
    (i32.load)
  )
  (func $37
    (type 6)
    (i32.const 0)
    (i32.const 1)
    (local.get 0)
    (select)
    (i32.eqz)
  )
  (func $38
    (type 6)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (i32.const 1)
    (i32.const 2)
    (local.get 0)
    (select)
    (i32.mul)
  )
  (func $39
    (type 6)
    (block
      (result i32)
      (i32.const 0)
      (i32.const 1)
      (local.get 0)
      (select)
      (i32.eqz)
    )
  )
  (func $40
    (type 6)
    (block
      (result i32)
      (i32.const 1)
      (i32.const 2)
      (local.get 0)
      (select)
      (i32.const 1)
      (i32.le_s)
    )
  )
  (func $41
    (type 6)
    (block
      (result i32)
      (i32.const 1)
      (i32.const 0)
      (i32.const 1)
      (local.get 0)
      (select)
      (i32.ne)
    )
  )
  (func $42
    (type 6)
    (block
      (result i32)
      (i64.const 1)
      (i64.const 0)
      (local.get 0)
      (select)
      (i32.wrap_i64)
    )
  )
  (export "select_i32" (func 1))
  (export "select_i64" (func 2))
  (export "select_f32" (func 3))
  (export "select_f64" (func 4))
  (export "select_trap_l" (func 5))
  (export "select_trap_r" (func 6))
  (export "select_unreached" (func 7))
  (export "as-select-first" (func 8))
  (export "as-select-mid" (func 9))
  (export "as-select-last" (func 10))
  (export "as-loop-first" (func 11))
  (export "as-loop-mid" (func 12))
  (export "as-loop-last" (func 13))
  (export "as-if-condition" (func 14))
  (export "as-if-then" (func 15))
  (export "as-if-else" (func 16))
  (export "as-br_if-first" (func 17))
  (export "as-br_if-last" (func 18))
  (export "as-br_table-first" (func 19))
  (export "as-br_table-last" (func 20))
  (export "as-call_indirect-first" (func 22))
  (export "as-call_indirect-mid" (func 23))
  (export "as-call_indirect-last" (func 24))
  (export "as-store-first" (func 25))
  (export "as-store-last" (func 26))
  (export "as-memory.grow-value" (func 27))
  (export "as-call-value" (func 29))
  (export "as-return-value" (func 30))
  (export "as-drop-operand" (func 31))
  (export "as-br-value" (func 32))
  (export "as-local.set-value" (func 33))
  (export "as-local.tee-value" (func 34))
  (export "as-global.set-value" (func 35))
  (export "as-load-operand" (func 36))
  (export "as-unary-operand" (func 37))
  (export "as-binary-operand" (func 38))
  (export "as-test-operand" (func 39))
  (export "as-compare-left" (func 40))
  (export "as-compare-right" (func 41))
  (export "as-convert-operand" (func 42))
  (elem 0 (offset (i32.const 0)) 21)
)
(assert_return
  (invoke "select_i32" (i32.const 1) (i32.const 2) (i32.const 1))
  (i32.const 1)
)
(assert_return
  (invoke "select_i64" (i64.const 2) (i64.const 1) (i32.const 1))
  (i64.const 2)
)
(assert_return
  (invoke "select_f32" (f32.const 1) (f32.const 2) (i32.const 1))
  (f32.const 1)
)
(assert_return
  (invoke "select_f64" (f64.const 1) (f64.const 2) (i32.const 1))
  (f64.const 1)
)
(assert_return
  (invoke "select_i32" (i32.const 1) (i32.const 2) (i32.const 0))
  (i32.const 2)
)
(assert_return
  (invoke "select_i32" (i32.const 2) (i32.const 1) (i32.const 0))
  (i32.const 1)
)
(assert_return
  (invoke "select_i64" (i64.const 2) (i64.const 1) (i32.const -1))
  (i64.const 2)
)
(assert_return
  (invoke "select_i64" (i64.const 2) (i64.const 1) (i32.const -252_645_136))
  (i64.const 2)
)
(assert_return
  (invoke "select_f32" (f32.const nan:0x400000) (f32.const 1) (i32.const 1))
  (f32.const nan:0x400000)
)
(assert_return
  (invoke "select_f32" (f32.const nan:0x20304) (f32.const 1) (i32.const 1))
  (f32.const nan:0x20304)
)
(assert_return
  (invoke "select_f32" (f32.const nan:0x400000) (f32.const 1) (i32.const 0))
  (f32.const 1)
)
(assert_return
  (invoke "select_f32" (f32.const nan:0x20304) (f32.const 1) (i32.const 0))
  (f32.const 1)
)
(assert_return
  (invoke "select_f32" (f32.const 2) (f32.const nan:0x400000) (i32.const 1))
  (f32.const 2)
)
(assert_return
  (invoke "select_f32" (f32.const 2) (f32.const nan:0x20304) (i32.const 1))
  (f32.const 2)
)
(assert_return
  (invoke "select_f32" (f32.const 2) (f32.const nan:0x400000) (i32.const 0))
  (f32.const nan:0x400000)
)
(assert_return
  (invoke "select_f32" (f32.const 2) (f32.const nan:0x20304) (i32.const 0))
  (f32.const nan:0x20304)
)
(assert_return
  (invoke "select_f64"
    (f64.const nan:0x8000000000000)
    (f64.const 1)
    (i32.const 1)
  )
  (f64.const nan:0x8000000000000)
)
(assert_return
  (invoke "select_f64" (f64.const nan:0x20304) (f64.const 1) (i32.const 1))
  (f64.const nan:0x20304)
)
(assert_return
  (invoke "select_f64"
    (f64.const nan:0x8000000000000)
    (f64.const 1)
    (i32.const 0)
  )
  (f64.const 1)
)
(assert_return
  (invoke "select_f64" (f64.const nan:0x20304) (f64.const 1) (i32.const 0))
  (f64.const 1)
)
(assert_return
  (invoke "select_f64"
    (f64.const 2)
    (f64.const nan:0x8000000000000)
    (i32.const 1)
  )
  (f64.const 2)
)
(assert_return
  (invoke "select_f64" (f64.const 2) (f64.const nan:0x20304) (i32.const 1))
  (f64.const 2)
)
(assert_return
  (invoke "select_f64"
    (f64.const 2)
    (f64.const nan:0x8000000000000)
    (i32.const 0)
  )
  (f64.const nan:0x8000000000000)
)
(assert_return
  (invoke "select_f64" (f64.const 2) (f64.const nan:0x20304) (i32.const 0))
  (f64.const nan:0x20304)
)
(assert_trap (invoke "select_trap_l" (i32.const 1)) "unreachable")
(assert_trap (invoke "select_trap_l" (i32.const 0)) "unreachable")
(assert_trap (invoke "select_trap_r" (i32.const 1)) "unreachable")
(assert_trap (invoke "select_trap_r" (i32.const 0)) "unreachable")
(assert_return (invoke "as-select-first" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-select-first" (i32.const 1)) (i32.const 0))
(assert_return (invoke "as-select-mid" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-select-mid" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-select-last" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-select-last" (i32.const 1)) (i32.const 3))
(assert_return (invoke "as-loop-first" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-loop-first" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-loop-mid" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-loop-mid" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-loop-last" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-loop-last" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-if-condition" (i32.const 0)))
(assert_return (invoke "as-if-condition" (i32.const 1)))
(assert_return (invoke "as-if-then" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-if-then" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-if-else" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-if-else" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-br_if-first" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-br_if-first" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-br_if-last" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-br_if-last" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-br_table-first" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-br_table-first" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-br_table-last" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-br_table-last" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-call_indirect-first" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-call_indirect-first" (i32.const 1)) (i32.const 2))
(assert_return (invoke "as-call_indirect-mid" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-call_indirect-mid" (i32.const 1)) (i32.const 1))
(assert_trap (invoke "as-call_indirect-last" (i32.const 0)) "undefined element")
(assert_trap (invoke "as-call_indirect-last" (i32.const 1)) "undefined element")
(assert_return (invoke "as-store-first" (i32.const 0)))
(assert_return (invoke "as-store-first" (i32.const 1)))
(assert_return (invoke "as-store-last" (i32.const 0)))
(assert_return (invoke "as-store-last" (i32.const 1)))
(assert_return (invoke "as-memory.grow-value" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-memory.grow-value" (i32.const 1)) (i32.const 3))
(assert_return (invoke "as-call-value" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-call-value" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-return-value" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-return-value" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-drop-operand" (i32.const 0)))
(assert_return (invoke "as-drop-operand" (i32.const 1)))
(assert_return (invoke "as-br-value" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-br-value" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-local.set-value" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-local.set-value" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-local.tee-value" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-local.tee-value" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-global.set-value" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-global.set-value" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-load-operand" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-load-operand" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-unary-operand" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-unary-operand" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-binary-operand" (i32.const 0)) (i32.const 4))
(assert_return (invoke "as-binary-operand" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-test-operand" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-test-operand" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-compare-left" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-compare-left" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-compare-right" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-compare-right" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-convert-operand" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-convert-operand" (i32.const 1)) (i32.const 1))
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (nop) (nop) (i32.const 1) (select))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (i32.const 1) (i64.const 1) (i32.const 1) (select))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (i32.const 1) (f32.const 1) (i32.const 1) (select))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (i32.const 1) (f64.const 1) (i32.const 1) (select))
  )
  "type mismatch"
)
(assert_invalid
  (module (type $0 (func)) (func $0 (type 0) (select) (drop)))
  "type mismatch"
)
(assert_invalid
  (module (type $0 (func)) (func $0 (type 0) (i32.const 0) (select) (drop)))
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (i32.const 0) (i32.const 0) (select) (drop))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (i32.const 0)
      (i32.const 0)
      (block (select) (drop))
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (i32.const 0)
      (block (i32.const 0) (select) (drop))
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (block (i32.const 0) (i32.const 0) (select) (drop))
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (i32.const 0)
      (i32.const 0)
      (loop (select) (drop))
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (i32.const 0)
      (loop (i32.const 0) (select) (drop))
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (loop (i32.const 0) (i32.const 0) (select) (drop))
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (i32.const 0)
      (i32.const 0)
      (if (then (select) (drop)) (else))
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (i32.const 0)
      (if (then (i32.const 0) (select) (drop)) (else))
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0
      (type 0)
      (i32.const 0)
      (if (then (i32.const 0) (i32.const 0) (select) (drop)) (else))
    )
  )
  "type mismatch"
)
