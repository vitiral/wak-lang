(module
  (type $0 (func))
  (type $1 (func (result i32)))
  (func $0 (type 0) (i32.const 3) (i64.const 1) (unreachable))
  (func $1 (type 0) (i32.const 3) (i64.const 1) (br 0))
  (func $2 (type 1) (i32.const 3) (i64.const 1) (i32.const 9) (br 0))
  (func $3
    (type 0)
    (i32.const 3)
    (i64.const 1)
    (i32.const 1)
    (br_if 0)
    (drop)
    (drop)
  )
  (func $4
    (type 1)
    (i32.const 3)
    (i64.const 1)
    (i32.const 9)
    (i32.const 1)
    (br_if 0)
    (drop)
    (drop)
  )
  (func $5 (type 0) (i32.const 3) (i64.const 1) (i32.const 0) (br_table 0))
  (func $6
    (type 1)
    (i32.const 3)
    (i64.const 1)
    (i32.const 9)
    (i32.const 0)
    (br_table 0)
  )
  (func $7 (type 1) (i32.const 3) (i64.const 1) (i32.const 9) (return))
  (func $8 (type 0) (block (i32.const 3) (i64.const 1) (unreachable)))
  (func $9 (type 1) (block (i32.const 3) (i64.const 1) (br 0)) (i32.const 9))
  (func $10
    (type 1)
    (block (result i32) (i32.const 3) (i64.const 1) (i32.const 9) (br 0))
  )
  (func $11
    (type 1)
    (block (i32.const 3) (i64.const 1) (i32.const 1) (br_if 0) (drop) (drop))
    (i32.const 9)
  )
  (func $12
    (type 1)
    (block
      (result i32)
      (i32.const 3)
      (i64.const 1)
      (i32.const 9)
      (i32.const 1)
      (br_if 0)
      (drop)
      (drop)
    )
  )
  (func $13
    (type 1)
    (block (i32.const 3) (i64.const 1) (i32.const 0) (br_table 0))
    (i32.const 9)
  )
  (func $14
    (type 1)
    (block
      (result i32)
      (i32.const 3)
      (i64.const 1)
      (i32.const 9)
      (i32.const 0)
      (br_table 0)
    )
  )
  (func $15
    (type 1)
    (block (result i32) (i32.const 3) (i64.const 1) (i32.const 9) (return))
  )
  (func $16
    (type 1)
    (block (result i32) (i32.const 3) (block (i64.const 1) (unreachable)))
  )
  (func $17
    (type 1)
    (block (i32.const 3) (block (i64.const 1) (br 1)) (drop))
    (i32.const 9)
  )
  (func $18
    (type 1)
    (block
      (result i32)
      (i32.const 3)
      (block (i64.const 1) (i32.const 9) (br 1))
    )
  )
  (func $19
    (type 1)
    (block
      (i32.const 3)
      (block (i64.const 1) (i32.const 1) (br_if 1) (drop))
      (drop)
    )
    (i32.const 9)
  )
  (func $20
    (type 1)
    (block
      (result i32)
      (i32.const 3)
      (block (i64.const 1) (i32.const 9) (i32.const 1) (br_if 1) (drop) (drop))
    )
  )
  (func $21
    (type 1)
    (block
      (i32.const 3)
      (block (i64.const 1) (i32.const 1) (br_table 1))
      (drop)
    )
    (i32.const 9)
  )
  (func $22
    (type 1)
    (block
      (result i32)
      (i32.const 3)
      (block (i64.const 1) (i32.const 9) (i32.const 1) (br_table 1))
    )
  )
  (func $23
    (type 1)
    (block
      (result i32)
      (i32.const 3)
      (block (i64.const 1) (i32.const 9) (return))
    )
  )
  (func $24 (type 1) (f32.const 0) (unreachable) (i64.eqz))
  (func $25
    (type 1)
    (block (result i32) (f32.const 0) (i32.const 9) (br 0) (i64.eqz))
  )
  (func $26
    (type 1)
    (block
      (result i32)
      (i64.const 0)
      (i32.const 9)
      (i32.const 1)
      (br_if 0)
      (drop)
      (i64.eqz)
    )
  )
  (func $27
    (type 1)
    (block
      (result i32)
      (f32.const 0)
      (i32.const 9)
      (i32.const 0)
      (br_table 0 0)
      (i64.eqz)
    )
  )
  (func $28 (type 1) (f32.const 0) (i32.const 9) (return) (i64.eqz))
  (func $29 (type 1) (f32.const 0) (f64.const 1) (unreachable) (i64.eq))
  (func $30
    (type 1)
    (block
      (result i32)
      (f32.const 0)
      (f64.const 1)
      (i32.const 9)
      (br 0)
      (i64.eq)
    )
  )
  (func $31
    (type 1)
    (block
      (result i32)
      (i64.const 0)
      (i64.const 1)
      (i32.const 9)
      (i32.const 1)
      (br_if 0)
      (drop)
      (i64.eq)
    )
  )
  (func $32
    (type 1)
    (block
      (result i32)
      (f32.const 0)
      (f64.const 1)
      (i32.const 9)
      (i32.const 0)
      (br_table 0)
      (i64.eq)
    )
  )
  (func $33
    (type 1)
    (f32.const 0)
    (f64.const 1)
    (i32.const 9)
    (return)
    (i64.eq)
  )
  (func $34
    (type 1)
    (f32.const 0)
    (f64.const 1)
    (i64.const 0)
    (unreachable)
    (select)
  )
  (func $35
    (type 1)
    (block
      (result i32)
      (f32.const 0)
      (f64.const 1)
      (i64.const 0)
      (i32.const 9)
      (br 0)
      (select)
    )
  )
  (func $36
    (type 1)
    (block
      (result i32)
      (i32.const 0)
      (i32.const 1)
      (i32.const 0)
      (i32.const 9)
      (i32.const 1)
      (br_if 0)
      (drop)
      (select)
    )
  )
  (func $37
    (type 1)
    (block
      (result i32)
      (f32.const 0)
      (f64.const 1)
      (i64.const 0)
      (i32.const 9)
      (i32.const 0)
      (br_table 0)
      (select)
    )
  )
  (func $38
    (type 1)
    (f32.const 0)
    (f64.const 1)
    (i64.const 1)
    (i32.const 9)
    (return)
    (select)
  )
  (func $39 (type 1) (block (result i32) (f32.const 0) (unreachable)))
  (func $40 (type 1) (block (result i32) (f32.const 0) (i32.const 9) (br 0)))
  (func $41
    (type 1)
    (block
      (result i32)
      (i32.const 0)
      (i32.const 9)
      (i32.const 1)
      (br_if 0)
      (drop)
    )
  )
  (func $42
    (type 1)
    (block
      (result i32)
      (f32.const 0)
      (i32.const 9)
      (i32.const 0)
      (br_table 0 0)
    )
  )
  (func $43 (type 1) (block (result i32) (f32.const 0) (i32.const 9) (return)))
  (func $44 (type 1) (loop (result i32) (f32.const 0) (unreachable)))
  (func $45
    (type 1)
    (block (result i32) (loop (result i32) (f32.const 0) (i32.const 9) (br 1)))
  )
  (func $46
    (type 1)
    (block
      (result i32)
      (loop
        (result i32)
        (i32.const 0)
        (i32.const 9)
        (i32.const 1)
        (br_if 1)
        (drop)
      )
    )
  )
  (func $47
    (type 1)
    (block
      (result i32)
      (loop
        (result i32)
        (f32.const 0)
        (i32.const 9)
        (i32.const 0)
        (br_table 1 1)
      )
    )
  )
  (func $48 (type 1) (loop (result i32) (f32.const 0) (i32.const 9) (return)))
  (export "func-unwind-by-unreachable" (func 0))
  (export "func-unwind-by-br" (func 1))
  (export "func-unwind-by-br-value" (func 2))
  (export "func-unwind-by-br_if" (func 3))
  (export "func-unwind-by-br_if-value" (func 4))
  (export "func-unwind-by-br_table" (func 5))
  (export "func-unwind-by-br_table-value" (func 6))
  (export "func-unwind-by-return" (func 7))
  (export "block-unwind-by-unreachable" (func 8))
  (export "block-unwind-by-br" (func 9))
  (export "block-unwind-by-br-value" (func 10))
  (export "block-unwind-by-br_if" (func 11))
  (export "block-unwind-by-br_if-value" (func 12))
  (export "block-unwind-by-br_table" (func 13))
  (export "block-unwind-by-br_table-value" (func 14))
  (export "block-unwind-by-return" (func 15))
  (export "block-nested-unwind-by-unreachable" (func 16))
  (export "block-nested-unwind-by-br" (func 17))
  (export "block-nested-unwind-by-br-value" (func 18))
  (export "block-nested-unwind-by-br_if" (func 19))
  (export "block-nested-unwind-by-br_if-value" (func 20))
  (export "block-nested-unwind-by-br_table" (func 21))
  (export "block-nested-unwind-by-br_table-value" (func 22))
  (export "block-nested-unwind-by-return" (func 23))
  (export "unary-after-unreachable" (func 24))
  (export "unary-after-br" (func 25))
  (export "unary-after-br_if" (func 26))
  (export "unary-after-br_table" (func 27))
  (export "unary-after-return" (func 28))
  (export "binary-after-unreachable" (func 29))
  (export "binary-after-br" (func 30))
  (export "binary-after-br_if" (func 31))
  (export "binary-after-br_table" (func 32))
  (export "binary-after-return" (func 33))
  (export "select-after-unreachable" (func 34))
  (export "select-after-br" (func 35))
  (export "select-after-br_if" (func 36))
  (export "select-after-br_table" (func 37))
  (export "select-after-return" (func 38))
  (export "block-value-after-unreachable" (func 39))
  (export "block-value-after-br" (func 40))
  (export "block-value-after-br_if" (func 41))
  (export "block-value-after-br_table" (func 42))
  (export "block-value-after-return" (func 43))
  (export "loop-value-after-unreachable" (func 44))
  (export "loop-value-after-br" (func 45))
  (export "loop-value-after-br_if" (func 46))
  (export "loop-value-after-br_table" (func 47))
  (export "loop-value-after-return" (func 48))
)
(assert_trap (invoke "func-unwind-by-unreachable") "unreachable")
(assert_return (invoke "func-unwind-by-br"))
(assert_return (invoke "func-unwind-by-br-value") (i32.const 9))
(assert_return (invoke "func-unwind-by-br_if"))
(assert_return (invoke "func-unwind-by-br_if-value") (i32.const 9))
(assert_return (invoke "func-unwind-by-br_table"))
(assert_return (invoke "func-unwind-by-br_table-value") (i32.const 9))
(assert_return (invoke "func-unwind-by-return") (i32.const 9))
(assert_trap (invoke "block-unwind-by-unreachable") "unreachable")
(assert_return (invoke "block-unwind-by-br") (i32.const 9))
(assert_return (invoke "block-unwind-by-br-value") (i32.const 9))
(assert_return (invoke "block-unwind-by-br_if") (i32.const 9))
(assert_return (invoke "block-unwind-by-br_if-value") (i32.const 9))
(assert_return (invoke "block-unwind-by-br_table") (i32.const 9))
(assert_return (invoke "block-unwind-by-br_table-value") (i32.const 9))
(assert_return (invoke "block-unwind-by-return") (i32.const 9))
(assert_trap (invoke "block-nested-unwind-by-unreachable") "unreachable")
(assert_return (invoke "block-nested-unwind-by-br") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-br-value") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-br_if") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-br_if-value") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-br_table") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-br_table-value") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-return") (i32.const 9))
(assert_trap (invoke "unary-after-unreachable") "unreachable")
(assert_return (invoke "unary-after-br") (i32.const 9))
(assert_return (invoke "unary-after-br_if") (i32.const 9))
(assert_return (invoke "unary-after-br_table") (i32.const 9))
(assert_return (invoke "unary-after-return") (i32.const 9))
(assert_trap (invoke "binary-after-unreachable") "unreachable")
(assert_return (invoke "binary-after-br") (i32.const 9))
(assert_return (invoke "binary-after-br_if") (i32.const 9))
(assert_return (invoke "binary-after-br_table") (i32.const 9))
(assert_return (invoke "binary-after-return") (i32.const 9))
(assert_trap (invoke "select-after-unreachable") "unreachable")
(assert_return (invoke "select-after-br") (i32.const 9))
(assert_return (invoke "select-after-br_if") (i32.const 9))
(assert_return (invoke "select-after-br_table") (i32.const 9))
(assert_return (invoke "select-after-return") (i32.const 9))
(assert_trap (invoke "block-value-after-unreachable") "unreachable")
(assert_return (invoke "block-value-after-br") (i32.const 9))
(assert_return (invoke "block-value-after-br_if") (i32.const 9))
(assert_return (invoke "block-value-after-br_table") (i32.const 9))
(assert_return (invoke "block-value-after-return") (i32.const 9))
(assert_trap (invoke "loop-value-after-unreachable") "unreachable")
(assert_return (invoke "loop-value-after-br") (i32.const 9))
(assert_return (invoke "loop-value-after-br_if") (i32.const 9))
(assert_return (invoke "loop-value-after-br_table") (i32.const 9))
(assert_return (invoke "loop-value-after-return") (i32.const 9))
