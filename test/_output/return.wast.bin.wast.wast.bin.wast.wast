(module
  (type $0 (func (param i32 i32 i32) (result i32)))
  (type $1 (func))
  (type $2 (func (result i32)))
  (type $3 (func (result i64)))
  (type $4 (func (result f32)))
  (type $5 (func (result f64)))
  (type $6 (func (param i32 i32) (result i32)))
  (table $0 1 1 funcref)
  (memory $0 1)
  (global $0 (mut i32) (i32.const 0))
  (func $0 (type 1))
  (func $1 (type 1) (return) (i32.ctz) (drop))
  (func $2 (type 1) (return) (i64.ctz) (drop))
  (func $3 (type 1) (return) (f32.neg) (drop))
  (func $4 (type 1) (return) (f64.neg) (drop))
  (func $5 (type 2) (block (result i32) (i32.const 1) (return) (i32.ctz)))
  (func $6 (type 3) (block (result i64) (i64.const 2) (return) (i64.ctz)))
  (func $7 (type 4) (block (result f32) (f32.const 3) (return) (f32.neg)))
  (func $8 (type 5) (block (result f64) (f64.const 4) (return) (f64.neg)))
  (func $9 (type 1) (return))
  (func $10 (type 5) (f64.const 3) (return))
  (func $11 (type 2) (i32.const 1) (return) (i32.const 2))
  (func $12 (type 2) (call 0) (i32.const 2) (return) (i32.const 3))
  (func $13 (type 1) (nop) (call 0) (return))
  (func $14 (type 2) (nop) (call 0) (i32.const 3) (return))
  (func $15 (type 1) (block (return) (call 0)))
  (func $16 (type 1) (block (call 0) (return) (call 0)))
  (func $17 (type 1) (block (nop) (call 0) (return)))
  (func $18 (type 2) (block (result i32) (nop) (call 0) (i32.const 2) (return)))
  (func $19 (type 2) (loop (result i32) (i32.const 3) (return) (i32.const 2)))
  (func $20
    (type 2)
    (loop (result i32) (call 0) (i32.const 4) (return) (i32.const 2))
  )
  (func $21 (type 2) (loop (result i32) (nop) (call 0) (i32.const 5) (return)))
  (func $22 (type 2) (block (result i32) (i32.const 9) (return) (br 0)))
  (func $23 (type 1) (block (return) (br_if 0)))
  (func $24
    (type 2)
    (block
      (result i32)
      (i32.const 8)
      (return)
      (i32.const 1)
      (br_if 0)
      (drop)
      (i32.const 7)
    )
  )
  (func $25
    (type 2)
    (block
      (result i32)
      (i32.const 6)
      (i32.const 9)
      (return)
      (br_if 0)
      (drop)
      (i32.const 7)
    )
  )
  (func $26
    (type 3)
    (block (i64.const 9) (return) (br_table 0 0 0))
    (i64.const -1)
  )
  (func $27
    (type 2)
    (block
      (result i32)
      (i32.const 10)
      (return)
      (i32.const 1)
      (br_table 0 0 0)
      (i32.const 7)
    )
  )
  (func $28
    (type 2)
    (block
      (result i32)
      (i32.const 6)
      (i32.const 11)
      (return)
      (br_table 0 0)
      (i32.const 7)
    )
  )
  (func $29 (type 3) (i64.const 7) (return) (return))
  (func $30
    (type 2)
    (i32.const 2)
    (return)
    (if (result i32) (then (i32.const 0)) (else (i32.const 1)))
  )
  (func $31
    (type 6)
    (local.get 0)
    (if (result i32) (then (i32.const 3) (return)) (else (local.get 1)))
  )
  (func $32
    (type 6)
    (local.get 0)
    (if (result i32) (then (local.get 1)) (else (i32.const 4) (return)))
  )
  (func $33
    (type 6)
    (i32.const 5)
    (return)
    (local.get 0)
    (local.get 1)
    (select)
  )
  (func $34
    (type 6)
    (local.get 0)
    (i32.const 6)
    (return)
    (local.get 1)
    (select)
  )
  (func $35
    (type 2)
    (i32.const 0)
    (i32.const 1)
    (i32.const 7)
    (return)
    (select)
  )
  (func $36 (type 0) (i32.const -1))
  (func $37
    (type 2)
    (i32.const 12)
    (return)
    (i32.const 2)
    (i32.const 3)
    (call 36)
  )
  (func $38
    (type 2)
    (i32.const 1)
    (i32.const 13)
    (return)
    (i32.const 3)
    (call 36)
  )
  (func $39
    (type 2)
    (i32.const 1)
    (i32.const 2)
    (i32.const 14)
    (return)
    (call 36)
  )
  (func $40
    (type 2)
    (i32.const 20)
    (return)
    (i32.const 1)
    (i32.const 2)
    (i32.const 3)
    (call_indirect (type 0))
  )
  (func $41
    (type 2)
    (i32.const 0)
    (i32.const 21)
    (return)
    (i32.const 2)
    (i32.const 3)
    (call_indirect (type 0))
  )
  (func $42
    (type 2)
    (i32.const 0)
    (i32.const 1)
    (i32.const 22)
    (return)
    (i32.const 3)
    (call_indirect (type 0))
  )
  (func $43
    (type 2)
    (i32.const 0)
    (i32.const 1)
    (i32.const 2)
    (i32.const 23)
    (return)
    (call_indirect (type 0))
  )
  (func $44
    (type 2)
    (local f32)
    (i32.const 17)
    (return)
    (local.set 0)
    (i32.const -1)
  )
  (func $45 (type 2) (local i32) (i32.const 1) (return) (local.tee 0))
  (func $46 (type 2) (i32.const 1) (return) (global.set 0))
  (func $47 (type 4) (f32.const 1.700_000_047_683_715_8) (return) (f32.load))
  (func $48 (type 3) (i64.const 30) (return) (i64.load8_s))
  (func $49
    (type 2)
    (i32.const 30)
    (return)
    (f64.const 7)
    (f64.store)
    (i32.const -1)
  )
  (func $50
    (type 2)
    (i32.const 2)
    (i32.const 31)
    (return)
    (i64.store)
    (i32.const -1)
  )
  (func $51
    (type 2)
    (i32.const 32)
    (return)
    (i32.const 7)
    (i32.store8)
    (i32.const -1)
  )
  (func $52
    (type 2)
    (i32.const 2)
    (i32.const 33)
    (return)
    (i64.store16)
    (i32.const -1)
  )
  (func $53 (type 4) (f32.const 3.400_000_095_367_431_6) (return) (f32.neg))
  (func $54 (type 2) (i32.const 3) (return) (i32.const 10) (i32.add))
  (func $55 (type 3) (i64.const 10) (i64.const 45) (return) (i64.sub))
  (func $56 (type 2) (i32.const 44) (return) (i32.eqz))
  (func $57 (type 2) (i32.const 43) (return) (f64.const 10) (f64.le))
  (func $58 (type 2) (f32.const 10) (i32.const 42) (return) (f32.ne))
  (func $59 (type 2) (i32.const 41) (return) (i32.wrap_i64))
  (func $60 (type 2) (i32.const 40) (return) (memory.grow))
  (export "type-i32" (func 1))
  (export "type-i64" (func 2))
  (export "type-f32" (func 3))
  (export "type-f64" (func 4))
  (export "type-i32-value" (func 5))
  (export "type-i64-value" (func 6))
  (export "type-f32-value" (func 7))
  (export "type-f64-value" (func 8))
  (export "nullary" (func 9))
  (export "unary" (func 10))
  (export "as-func-first" (func 11))
  (export "as-func-mid" (func 12))
  (export "as-func-last" (func 13))
  (export "as-func-value" (func 14))
  (export "as-block-first" (func 15))
  (export "as-block-mid" (func 16))
  (export "as-block-last" (func 17))
  (export "as-block-value" (func 18))
  (export "as-loop-first" (func 19))
  (export "as-loop-mid" (func 20))
  (export "as-loop-last" (func 21))
  (export "as-br-value" (func 22))
  (export "as-br_if-cond" (func 23))
  (export "as-br_if-value" (func 24))
  (export "as-br_if-value-cond" (func 25))
  (export "as-br_table-index" (func 26))
  (export "as-br_table-value" (func 27))
  (export "as-br_table-value-index" (func 28))
  (export "as-return-value" (func 29))
  (export "as-if-cond" (func 30))
  (export "as-if-then" (func 31))
  (export "as-if-else" (func 32))
  (export "as-select-first" (func 33))
  (export "as-select-second" (func 34))
  (export "as-select-cond" (func 35))
  (export "as-call-first" (func 37))
  (export "as-call-mid" (func 38))
  (export "as-call-last" (func 39))
  (export "as-call_indirect-func" (func 40))
  (export "as-call_indirect-first" (func 41))
  (export "as-call_indirect-mid" (func 42))
  (export "as-call_indirect-last" (func 43))
  (export "as-local.set-value" (func 44))
  (export "as-local.tee-value" (func 45))
  (export "as-global.set-value" (func 46))
  (export "as-load-address" (func 47))
  (export "as-loadN-address" (func 48))
  (export "as-store-address" (func 49))
  (export "as-store-value" (func 50))
  (export "as-storeN-address" (func 51))
  (export "as-storeN-value" (func 52))
  (export "as-unary-operand" (func 53))
  (export "as-binary-left" (func 54))
  (export "as-binary-right" (func 55))
  (export "as-test-operand" (func 56))
  (export "as-compare-left" (func 57))
  (export "as-compare-right" (func 58))
  (export "as-convert-operand" (func 59))
  (export "as-memory.grow-size" (func 60))
  (elem 0 (offset (i32.const 0)) 36)
)
(assert_return (invoke "type-i32"))
(assert_return (invoke "type-i64"))
(assert_return (invoke "type-f32"))
(assert_return (invoke "type-f64"))
(assert_return (invoke "type-i32-value") (i32.const 1))
(assert_return (invoke "type-i64-value") (i64.const 2))
(assert_return (invoke "type-f32-value") (f32.const 3))
(assert_return (invoke "type-f64-value") (f64.const 4))
(assert_return (invoke "nullary"))
(assert_return (invoke "unary") (f64.const 3))
(assert_return (invoke "as-func-first") (i32.const 1))
(assert_return (invoke "as-func-mid") (i32.const 2))
(assert_return (invoke "as-func-last"))
(assert_return (invoke "as-func-value") (i32.const 3))
(assert_return (invoke "as-block-first"))
(assert_return (invoke "as-block-mid"))
(assert_return (invoke "as-block-last"))
(assert_return (invoke "as-block-value") (i32.const 2))
(assert_return (invoke "as-loop-first") (i32.const 3))
(assert_return (invoke "as-loop-mid") (i32.const 4))
(assert_return (invoke "as-loop-last") (i32.const 5))
(assert_return (invoke "as-br-value") (i32.const 9))
(assert_return (invoke "as-br_if-cond"))
(assert_return (invoke "as-br_if-value") (i32.const 8))
(assert_return (invoke "as-br_if-value-cond") (i32.const 9))
(assert_return (invoke "as-br_table-index") (i64.const 9))
(assert_return (invoke "as-br_table-value") (i32.const 10))
(assert_return (invoke "as-br_table-value-index") (i32.const 11))
(assert_return (invoke "as-return-value") (i64.const 7))
(assert_return (invoke "as-if-cond") (i32.const 2))
(assert_return (invoke "as-if-then" (i32.const 1) (i32.const 6)) (i32.const 3))
(assert_return (invoke "as-if-then" (i32.const 0) (i32.const 6)) (i32.const 6))
(assert_return (invoke "as-if-else" (i32.const 0) (i32.const 6)) (i32.const 4))
(assert_return (invoke "as-if-else" (i32.const 1) (i32.const 6)) (i32.const 6))
(assert_return
  (invoke "as-select-first" (i32.const 0) (i32.const 6))
  (i32.const 5)
)
(assert_return
  (invoke "as-select-first" (i32.const 1) (i32.const 6))
  (i32.const 5)
)
(assert_return
  (invoke "as-select-second" (i32.const 0) (i32.const 6))
  (i32.const 6)
)
(assert_return
  (invoke "as-select-second" (i32.const 1) (i32.const 6))
  (i32.const 6)
)
(assert_return (invoke "as-select-cond") (i32.const 7))
(assert_return (invoke "as-call-first") (i32.const 12))
(assert_return (invoke "as-call-mid") (i32.const 13))
(assert_return (invoke "as-call-last") (i32.const 14))
(assert_return (invoke "as-call_indirect-func") (i32.const 20))
(assert_return (invoke "as-call_indirect-first") (i32.const 21))
(assert_return (invoke "as-call_indirect-mid") (i32.const 22))
(assert_return (invoke "as-call_indirect-last") (i32.const 23))
(assert_return (invoke "as-local.set-value") (i32.const 17))
(assert_return (invoke "as-local.tee-value") (i32.const 1))
(assert_return (invoke "as-global.set-value") (i32.const 1))
(assert_return (invoke "as-load-address") (f32.const 1.700_000_047_683_715_8))
(assert_return (invoke "as-loadN-address") (i64.const 30))
(assert_return (invoke "as-store-address") (i32.const 30))
(assert_return (invoke "as-store-value") (i32.const 31))
(assert_return (invoke "as-storeN-address") (i32.const 32))
(assert_return (invoke "as-storeN-value") (i32.const 33))
(assert_return (invoke "as-unary-operand") (f32.const 3.400_000_095_367_431_6))
(assert_return (invoke "as-binary-left") (i32.const 3))
(assert_return (invoke "as-binary-right") (i64.const 45))
(assert_return (invoke "as-test-operand") (i32.const 44))
(assert_return (invoke "as-compare-left") (i32.const 43))
(assert_return (invoke "as-compare-right") (i32.const 42))
(assert_return (invoke "as-convert-operand") (i32.const 41))
(assert_return (invoke "as-memory.grow-size") (i32.const 40))
(assert_invalid
  (module (type $0 (func (result i32))) (func $0 (type 0) (return)))
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (i32.const 0) (block (return)))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (i32.const 0) (loop (return)))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (i32.const 0) (i32.const 0) (if (then (return)) (else)))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0
      (type 0)
      (i32.const 0)
      (i32.const 0)
      (if (result i32) (then (i32.const 0)) (else (return)))
      (drop)
    )
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (i32.const 0) (block (return) (br 0)))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (i32.const 0) (block (return) (i32.const 1) (br_if 0)))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (i32.const 0) (block (return) (br_table 0)))
  )
  "type mismatch"
)
(assert_invalid
  (module (type $0 (func (result i32))) (func $0 (type 0) (return) (return)))
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (return) (i32.const 1) (i32.const 2) (select))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (type $1 (func (param i32) (result i32)))
    (func $0 (type 0) (return) (call 1))
    (func $1 (type 1) (local.get 0))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (param i32) (result i32)))
    (type $1 (func (result i32)))
    (table $0 1 1 funcref)
    (func $0 (type 0) (local.get 0))
    (func $1
      (type 1)
      (block (result i32) (return) (i32.const 0) (call_indirect (type 0)))
    )
    (elem 0 (offset (i32.const 0)) 0)
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (local i32) (return) (local.set 0) (local.get 0))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (func $0 (type 0) (local i32) (return) (local.tee 0))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (global $0 (mut i32) (i32.const 0))
    (func $0 (type 0) (return) (global.set 0) (global.get 0))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (memory $0 0)
    (func $0 (type 0) (return) (memory.grow))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (memory $0 0)
    (func $0 (type 0) (return) (i32.load))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result i32)))
    (memory $0 1)
    (func $0 (type 0) (return) (i32.const 1) (i32.store))
  )
  "type mismatch"
)
(assert_invalid
  (module (type $0 (func (result f64))) (func $0 (type 0) (nop) (return)))
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func (result f64)))
    (func $0 (type 0) (i64.const 1) (return))
  )
  "type mismatch"
)
