(module
  (type $0 (func (param i32 i32) (result i32)))
  (type $1 (func (result i32)))
  (type $2 (func (result i64)))
  (type $3 (func (result f32)))
  (type $4 (func (result f64)))
  (type $5 (func (param i32) (result i32)))
  (type $6 (func (param i64) (result i64)))
  (type $7 (func (param f32) (result f32)))
  (type $8 (func (param f64) (result f64)))
  (type $9 (func (param f32 i32) (result i32)))
  (type $10 (func (param i32 i64) (result i64)))
  (type $11 (func (param f64 f32) (result f32)))
  (type $12 (func (param i64 f64) (result f64)))
  (type $13 (func (param i64 i64) (result i64)))
  (type $14 (func (param i64) (result i32)))
  (type $15 (func))
  (table $0 1 1 funcref)
  (memory $0 1)
  (global $0 (mut i32) (i32.const 10))
  (func $0 (type 1) (i32.const 306))
  (func $1 (type 2) (i64.const 356))
  (func $2 (type 3) (f32.const 3_890))
  (func $3 (type 4) (f64.const 3_940))
  (func $4 (type 5) (local.get 0))
  (func $5 (type 6) (local.get 0))
  (func $6 (type 7) (local.get 0))
  (func $7 (type 8) (local.get 0))
  (func $8 (type 9) (local.get 1))
  (func $9 (type 10) (local.get 1))
  (func $10 (type 11) (local.get 1))
  (func $11 (type 12) (local.get 1))
  (func $12 (type 1) (call 0))
  (func $13 (type 2) (call 1))
  (func $14 (type 3) (call 2))
  (func $15 (type 4) (call 3))
  (func $16 (type 1) (i32.const 32) (call 4))
  (func $17 (type 2) (i64.const 64) (call 5))
  (func $18 (type 3) (f32.const 1.320_000_052_452_087_4) (call 6))
  (func $19 (type 4) (f64.const 1.639_999_999_999_999_9) (call 7))
  (func $20 (type 1) (f32.const 32.099_998_474_121_094) (i32.const 32) (call 8))
  (func $21 (type 2) (i32.const 32) (i64.const 64) (call 9))
  (func $22 (type 3) (f64.const 64) (f32.const 32) (call 10))
  (func $23
    (type 4)
    (i64.const 64)
    (f64.const 64.099_999_999_999_994)
    (call 11)
  )
  (func $24
    (type 6)
    (local.get 0)
    (i64.eqz)
    (if
      (result i64)
      (then (i64.const 1))
      (else
        (local.get 0)
        (local.get 0)
        (i64.const 1)
        (i64.sub)
        (call 24)
        (i64.mul)
      )
    )
  )
  (func $25
    (type 13)
    (local.get 0)
    (i64.eqz)
    (if
      (result i64)
      (then (local.get 1))
      (else
        (local.get 0)
        (i64.const 1)
        (i64.sub)
        (local.get 0)
        (local.get 1)
        (i64.mul)
        (call 25)
      )
    )
  )
  (func $26
    (type 6)
    (local.get 0)
    (i64.const 1)
    (i64.le_u)
    (if
      (result i64)
      (then (i64.const 1))
      (else
        (local.get 0)
        (i64.const 2)
        (i64.sub)
        (call 26)
        (local.get 0)
        (i64.const 1)
        (i64.sub)
        (call 26)
        (i64.add)
      )
    )
  )
  (func $27
    (type 14)
    (local.get 0)
    (i64.eqz)
    (if
      (result i32)
      (then (i32.const 44))
      (else (local.get 0) (i64.const 1) (i64.sub) (call 28))
    )
  )
  (func $28
    (type 14)
    (local.get 0)
    (i64.eqz)
    (if
      (result i32)
      (then (i32.const 99))
      (else (local.get 0) (i64.const 1) (i64.sub) (call 27))
    )
  )
  (func $29 (type 15) (call 29))
  (func $30 (type 15) (call 31))
  (func $31 (type 15) (call 30))
  (func $32 (type 1) (call 0) (i32.const 2) (i32.const 3) (select))
  (func $33 (type 1) (i32.const 2) (call 0) (i32.const 3) (select))
  (func $34 (type 1) (i32.const 2) (i32.const 3) (call 0) (select))
  (func $35
    (type 1)
    (call 0)
    (if (result i32) (then (i32.const 1)) (else (i32.const 2)))
  )
  (func $36 (type 1) (block (result i32) (call 0) (i32.const 2) (br_if 0)))
  (func $37 (type 1) (block (result i32) (i32.const 2) (call 0) (br_if 0)))
  (func $38 (type 1) (block (result i32) (call 0) (i32.const 2) (br_table 0 0)))
  (func $39 (type 1) (block (result i32) (i32.const 2) (call 0) (br_table 0 0)))
  (func $40 (type 0) (local.get 0))
  (func $41
    (type 1)
    (block
      (result i32)
      (call 0)
      (i32.const 2)
      (i32.const 0)
      (call_indirect (type 0))
    )
  )
  (func $42
    (type 1)
    (block
      (result i32)
      (i32.const 2)
      (call 0)
      (i32.const 0)
      (call_indirect (type 0))
    )
  )
  (func $43
    (type 1)
    (block
      (result i32)
      (i32.const 1)
      (i32.const 2)
      (call 0)
      (call_indirect (type 0))
    )
  )
  (func $44 (type 15) (call 0) (i32.const 1) (i32.store))
  (func $45 (type 15) (i32.const 10) (call 0) (i32.store))
  (func $46 (type 1) (call 0) (memory.grow))
  (func $47 (type 1) (call 0) (return))
  (func $48 (type 15) (call 0) (drop))
  (func $49 (type 1) (block (result i32) (call 0) (br 0)))
  (func $50 (type 1) (local i32) (call 0) (local.set 0) (local.get 0))
  (func $51 (type 1) (local i32) (call 0) (local.tee 0))
  (func $52 (type 1) (call 0) (global.set 0) (global.get 0))
  (func $53 (type 1) (call 0) (i32.load))
  (func $54 (type 5) (local.get 0))
  (func $55 (type 7) (local.get 0))
  (func $56 (type 3) (block (result f32) (f32.const 0) (call 55) (f32.sqrt)))
  (func $57
    (type 1)
    (block (result i32) (i32.const 1) (call 54) (i32.const 10) (i32.add))
  )
  (func $58
    (type 1)
    (block (result i32) (i32.const 10) (i32.const 1) (call 54) (i32.sub))
  )
  (func $59 (type 1) (block (result i32) (i32.const 1) (call 54) (i32.eqz)))
  (func $60
    (type 1)
    (block (result i32) (i32.const 1) (call 54) (i32.const 10) (i32.le_u))
  )
  (func $61
    (type 1)
    (block (result i32) (i32.const 10) (i32.const 1) (call 54) (i32.ne))
  )
  (func $62
    (type 2)
    (block (result i64) (i32.const 1) (call 54) (i64.extend_i32_s))
  )
  (export "type-i32" (func 12))
  (export "type-i64" (func 13))
  (export "type-f32" (func 14))
  (export "type-f64" (func 15))
  (export "type-first-i32" (func 16))
  (export "type-first-i64" (func 17))
  (export "type-first-f32" (func 18))
  (export "type-first-f64" (func 19))
  (export "type-second-i32" (func 20))
  (export "type-second-i64" (func 21))
  (export "type-second-f32" (func 22))
  (export "type-second-f64" (func 23))
  (export "fac" (func 24))
  (export "fac-acc" (func 25))
  (export "fib" (func 26))
  (export "even" (func 27))
  (export "odd" (func 28))
  (export "runaway" (func 29))
  (export "mutual-runaway" (func 30))
  (export "as-select-first" (func 32))
  (export "as-select-mid" (func 33))
  (export "as-select-last" (func 34))
  (export "as-if-condition" (func 35))
  (export "as-br_if-first" (func 36))
  (export "as-br_if-last" (func 37))
  (export "as-br_table-first" (func 38))
  (export "as-br_table-last" (func 39))
  (export "as-call_indirect-first" (func 41))
  (export "as-call_indirect-mid" (func 42))
  (export "as-call_indirect-last" (func 43))
  (export "as-store-first" (func 44))
  (export "as-store-last" (func 45))
  (export "as-memory.grow-value" (func 46))
  (export "as-return-value" (func 47))
  (export "as-drop-operand" (func 48))
  (export "as-br-value" (func 49))
  (export "as-local.set-value" (func 50))
  (export "as-local.tee-value" (func 51))
  (export "as-global.set-value" (func 52))
  (export "as-load-operand" (func 53))
  (export "as-unary-operand" (func 56))
  (export "as-binary-left" (func 57))
  (export "as-binary-right" (func 58))
  (export "as-test-operand" (func 59))
  (export "as-compare-left" (func 60))
  (export "as-compare-right" (func 61))
  (export "as-convert-operand" (func 62))
  (elem 0 (offset (i32.const 0)) 40)
)
(assert_return (invoke "type-i32") (i32.const 306))
(assert_return (invoke "type-i64") (i64.const 356))
(assert_return (invoke "type-f32") (f32.const 3_890))
(assert_return (invoke "type-f64") (f64.const 3_940))
(assert_return (invoke "type-first-i32") (i32.const 32))
(assert_return (invoke "type-first-i64") (i64.const 64))
(assert_return (invoke "type-first-f32") (f32.const 1.320_000_052_452_087_4))
(assert_return (invoke "type-first-f64") (f64.const 1.639_999_999_999_999_9))
(assert_return (invoke "type-second-i32") (i32.const 32))
(assert_return (invoke "type-second-i64") (i64.const 64))
(assert_return (invoke "type-second-f32") (f32.const 32))
(assert_return (invoke "type-second-f64") (f64.const 64.099_999_999_999_994))
(assert_return (invoke "fac" (i64.const 0)) (i64.const 1))
(assert_return (invoke "fac" (i64.const 1)) (i64.const 1))
(assert_return (invoke "fac" (i64.const 5)) (i64.const 120))
(assert_return
  (invoke "fac" (i64.const 25))
  (i64.const 7_034_535_277_573_963_776)
)
(assert_return (invoke "fac-acc" (i64.const 0) (i64.const 1)) (i64.const 1))
(assert_return (invoke "fac-acc" (i64.const 1) (i64.const 1)) (i64.const 1))
(assert_return (invoke "fac-acc" (i64.const 5) (i64.const 1)) (i64.const 120))
(assert_return
  (invoke "fac-acc" (i64.const 25) (i64.const 1))
  (i64.const 7_034_535_277_573_963_776)
)
(assert_return (invoke "fib" (i64.const 0)) (i64.const 1))
(assert_return (invoke "fib" (i64.const 1)) (i64.const 1))
(assert_return (invoke "fib" (i64.const 2)) (i64.const 2))
(assert_return (invoke "fib" (i64.const 5)) (i64.const 8))
(assert_return (invoke "fib" (i64.const 20)) (i64.const 10_946))
(assert_return (invoke "even" (i64.const 0)) (i32.const 44))
(assert_return (invoke "even" (i64.const 1)) (i32.const 99))
(assert_return (invoke "even" (i64.const 100)) (i32.const 44))
(assert_return (invoke "even" (i64.const 77)) (i32.const 99))
(assert_return (invoke "odd" (i64.const 0)) (i32.const 99))
(assert_return (invoke "odd" (i64.const 1)) (i32.const 44))
(assert_return (invoke "odd" (i64.const 200)) (i32.const 99))
(assert_return (invoke "odd" (i64.const 77)) (i32.const 44))
(assert_exhaustion (invoke "runaway") "call stack exhausted")
(assert_exhaustion (invoke "mutual-runaway") "call stack exhausted")
(assert_return (invoke "as-select-first") (i32.const 306))
(assert_return (invoke "as-select-mid") (i32.const 2))
(assert_return (invoke "as-select-last") (i32.const 2))
(assert_return (invoke "as-if-condition") (i32.const 1))
(assert_return (invoke "as-br_if-first") (i32.const 306))
(assert_return (invoke "as-br_if-last") (i32.const 2))
(assert_return (invoke "as-br_table-first") (i32.const 306))
(assert_return (invoke "as-br_table-last") (i32.const 2))
(assert_return (invoke "as-call_indirect-first") (i32.const 306))
(assert_return (invoke "as-call_indirect-mid") (i32.const 2))
(assert_trap (invoke "as-call_indirect-last") "undefined element")
(assert_return (invoke "as-store-first"))
(assert_return (invoke "as-store-last"))
(assert_return (invoke "as-memory.grow-value") (i32.const 1))
(assert_return (invoke "as-return-value") (i32.const 306))
(assert_return (invoke "as-drop-operand"))
(assert_return (invoke "as-br-value") (i32.const 306))
(assert_return (invoke "as-local.set-value") (i32.const 306))
(assert_return (invoke "as-local.tee-value") (i32.const 306))
(assert_return (invoke "as-global.set-value") (i32.const 306))
(assert_return (invoke "as-load-operand") (i32.const 1))
(assert_return (invoke "as-unary-operand") (f32.const 0))
(assert_return (invoke "as-binary-left") (i32.const 11))
(assert_return (invoke "as-binary-right") (i32.const 9))
(assert_return (invoke "as-test-operand") (i32.const 0))
(assert_return (invoke "as-compare-left") (i32.const 1))
(assert_return (invoke "as-compare-right") (i32.const 1))
(assert_return (invoke "as-convert-operand") (i64.const 1))
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (call 1) (i32.eqz))
    (func $1 (type 0))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (result i64)))
    (func $0 (type 0) (call 1) (i32.eqz))
    (func $1 (type 1) (i64.const 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32)))
    (func $0 (type 0) (call 1))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param f64 i32)))
    (func $0 (type 0) (call 1))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (i32.const 1) (call 1))
    (func $1 (type 0))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (f64.const 2) (i32.const 1) (call 1))
    (func $1 (type 0))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32 i32)))
    (func $0 (type 0) (nop) (i32.const 1) (call 1))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32 i32)))
    (func $0 (type 0) (i32.const 1) (nop) (call 1))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32 f64)))
    (func $0 (type 0) (f64.const 1) (i32.const 1) (call 1))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param f64 i32)))
    (func $0 (type 0) (i32.const 1) (f64.const 1) (call 1))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32)))
    (func $0 (type 0) (block (call 1)))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32 i32)))
    (func $0 (type 0) (block (i32.const 0) (call 1)))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32)))
    (func $0 (type 0) (loop (call 1)))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32 i32)))
    (func $0 (type 0) (loop (i32.const 0) (call 1)))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32)))
    (func $0 (type 0) (i32.const 0) (if (then (call 1)) (else)))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (type $1 (func (param i32 i32)))
    (func $0 (type 0) (i32.const 0) (if (then (i32.const 0) (call 1)) (else)))
    (func $1 (type 1))
  )
  "type mismatch"
)
(assert_invalid
  (module (type $0 (func)) (func $0 (type 0) (call 1)))
  "unknown function"
)
(assert_invalid
  (module (type $0 (func)) (func $0 (type 0) (call 1_012_321_300)))
  "unknown function"
)
