(module
  (type $0 (func))
  (type $1 (func))
  (type $2 (func))
  (type $3 (func (result i32)))
  (type $4 (func (result i32)))
  (type $5 (func (param i32) (result i32)))
  (type $6 (func (param i32)))
  (import "spectest" "print_i32" (func $0 (type 6)))
  (func $1 (type 0))
  (func $2 (type 1))
  (func $3 (type 4) (i32.const 13))
  (func $4 (type 5) (local.get 0) (i32.const 1) (i32.add))
  (func $5 (type 5) (local.get 0) (i32.const 2) (i32.sub))
  (func $6 (type 6) (local.get 0) (call 0))
  (export "one" (func 3))
  (export "two" (func 4))
  (export "three" (func 5))
  (export "four" (func 6))
)
(assert_return (invoke "one") (i32.const 13))
(assert_return (invoke "two" (i32.const 13)) (i32.const 14))
(assert_return (invoke "three" (i32.const 13)) (i32.const 11))
(invoke "four" (i32.const 83))
(assert_invalid (module (elem 0 (offset (i32.const 0)))) "unknown table")
(assert_invalid
  (module (type $0 (func)) (func $0 (type 0)) (elem 0 (offset (i32.const 0)) 0))
  "unknown table"
)
(assert_invalid
  (module (table $0 1 funcref) (elem 0 (offset (i64.const 0))))
  "type mismatch"
)
(assert_invalid
  (module (table $0 1 funcref) (elem 0 (offset (i32.const 0) (i32.ctz))))
  "constant expression required"
)
(assert_invalid
  (module (table $0 1 funcref) (elem 0 (offset (nop))))
  "constant expression required"
)
(assert_invalid (module (func $0 (type 42))) "unknown type")
(assert_invalid
  (module (import "spectest" "print_i32" (func $0 (type 43))))
  "unknown type"
)
(module
  (type $0 (func (result i32)))
  (type $1 (func (result i32)))
  (type $2 (func (param i32) (result i32)))
  (table $0 7 7 funcref)
  (func $0 (type 0) (i32.const 1))
  (func $1 (type 0) (i32.const 2))
  (func $2 (type 0) (i32.const 3))
  (func $3 (type 1) (i32.const 4))
  (func $4 (type 1) (i32.const 5))
  (func $5 (type 2) (local.get 0) (call_indirect (type 0)))
  (func $6 (type 2) (local.get 0) (call_indirect (type 1)))
  (export "callt" (func 5))
  (export "callu" (func 6))
  (elem 0 (offset (i32.const 0)) 0 1 2 3 4 0 2)
)
(assert_return (invoke "callt" (i32.const 0)) (i32.const 1))
(assert_return (invoke "callt" (i32.const 1)) (i32.const 2))
(assert_return (invoke "callt" (i32.const 2)) (i32.const 3))
(assert_return (invoke "callt" (i32.const 3)) (i32.const 4))
(assert_return (invoke "callt" (i32.const 4)) (i32.const 5))
(assert_return (invoke "callt" (i32.const 5)) (i32.const 1))
(assert_return (invoke "callt" (i32.const 6)) (i32.const 3))
(assert_trap (invoke "callt" (i32.const 7)) "undefined element")
(assert_trap (invoke "callt" (i32.const 100)) "undefined element")
(assert_trap (invoke "callt" (i32.const -1)) "undefined element")
(assert_return (invoke "callu" (i32.const 0)) (i32.const 1))
(assert_return (invoke "callu" (i32.const 1)) (i32.const 2))
(assert_return (invoke "callu" (i32.const 2)) (i32.const 3))
(assert_return (invoke "callu" (i32.const 3)) (i32.const 4))
(assert_return (invoke "callu" (i32.const 4)) (i32.const 5))
(assert_return (invoke "callu" (i32.const 5)) (i32.const 1))
(assert_return (invoke "callu" (i32.const 6)) (i32.const 3))
(assert_trap (invoke "callu" (i32.const 7)) "undefined element")
(assert_trap (invoke "callu" (i32.const 100)) "undefined element")
(assert_trap (invoke "callu" (i32.const -1)) "undefined element")
(module
  (type $0 (func (result i32)))
  (type $1 (func (param i32) (result i32)))
  (table $0 2 2 funcref)
  (func $0 (type 0) (i32.const 1))
  (func $1 (type 0) (i32.const 2))
  (func $2 (type 1) (local.get 0) (call_indirect (type 0)))
  (export "callt" (func 2))
  (elem 0 (offset (i32.const 0)) 0 1)
)
(assert_return (invoke "callt" (i32.const 0)) (i32.const 1))
(assert_return (invoke "callt" (i32.const 1)) (i32.const 2))
