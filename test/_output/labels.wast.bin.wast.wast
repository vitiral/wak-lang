(module
  (type $0 (func (result i32)))
  (type $1 (func (param i32) (result i32)))
  (func $0 (type 0) (block (result i32) (i32.const 1) (br 0) (i32.const 0)))
  (func $1
    (type 0)
    (local i32)
    (i32.const 0)
    (local.set 0)
    (block
      (result i32)
      (loop
        (result i32)
        (local.get 0)
        (i32.const 1)
        (i32.add)
        (local.set 0)
        (local.get 0)
        (i32.const 5)
        (i32.eq)
        (if (then (local.get 0) (br 2)) (else))
        (br 0)
      )
    )
  )
  (func $2
    (type 0)
    (local i32)
    (i32.const 0)
    (local.set 0)
    (block
      (result i32)
      (loop
        (result i32)
        (local.get 0)
        (i32.const 1)
        (i32.add)
        (local.set 0)
        (local.get 0)
        (i32.const 5)
        (i32.eq)
        (if (then (br 1)) (else))
        (local.get 0)
        (i32.const 8)
        (i32.eq)
        (if (then (local.get 0) (br 2)) (else))
        (local.get 0)
        (i32.const 1)
        (i32.add)
        (local.set 0)
        (br 0)
      )
    )
  )
  (func $3
    (type 0)
    (local i32)
    (i32.const 0)
    (local.set 0)
    (block
      (result i32)
      (loop
        (result i32)
        (local.get 0)
        (i32.const 1)
        (i32.add)
        (local.set 0)
        (local.get 0)
        (i32.const 5)
        (i32.eq)
        (if (then (local.get 0) (br 2)) (else))
        (local.get 0)
      )
    )
  )
  (func $4
    (type 1)
    (local i32)
    (i32.const 1)
    (local.set 1)
    (block
      (result i32)
      (loop
        (result i32)
        (local.get 1)
        (local.get 1)
        (i32.add)
        (local.set 1)
        (local.get 1)
        (local.get 0)
        (i32.gt_u)
        (if (then (local.get 1) (br 2)) (else))
        (br 0)
      )
    )
  )
  (func $5 (type 0) (loop (result i32) (i32.const 1)) (i32.const 1) (i32.add))
  (func $6 (type 0) (loop (result i32) (i32.const 0) (br_if 0) (i32.const 3)))
  (func $7
    (type 0)
    (local i32)
    (i32.const 0)
    (local.set 0)
    (block
      (i32.const 1)
      (if (then (br 0) (i32.const 666) (local.set 0)) (else))
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
      (i32.const 1)
      (if
        (then (br 0) (i32.const 666) (local.set 0))
        (else (i32.const 888) (local.set 0))
      )
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
      (i32.const 1)
      (if
        (then (br 0) (i32.const 666) (local.set 0))
        (else (i32.const 888) (local.set 0))
      )
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
      (i32.const 0)
      (if
        (then (i32.const 888) (local.set 0))
        (else (br 0) (i32.const 666) (local.set 0))
      )
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
      (i32.const 0)
      (if
        (then (i32.const 888) (local.set 0))
        (else (br 0) (i32.const 666) (local.set 0))
      )
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
    )
    (local.get 0)
  )
  (func $8
    (type 0)
    (local i32)
    (i32.const 0)
    (local.set 0)
    (block
      (i32.const 1)
      (if (then (br 0) (i32.const 666) (local.set 0)) (else))
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
      (i32.const 1)
      (if
        (then (br 0) (i32.const 666) (local.set 0))
        (else (i32.const 888) (local.set 0))
      )
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
      (i32.const 1)
      (if
        (then (br 0) (i32.const 666) (local.set 0))
        (else (i32.const 888) (local.set 0))
      )
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
      (i32.const 0)
      (if
        (then (i32.const 888) (local.set 0))
        (else (br 0) (i32.const 666) (local.set 0))
      )
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
      (i32.const 0)
      (if
        (then (i32.const 888) (local.set 0))
        (else (br 0) (i32.const 666) (local.set 0))
      )
      (local.get 0)
      (i32.const 1)
      (i32.add)
      (local.set 0)
    )
    (local.get 0)
  )
  (func $9
    (type 1)
    (block
      (result i32)
      (i32.const 10)
      (block
        (result i32)
        (block
          (block
            (block
              (block (block (local.get 0) (br_table 4 0 1 2 3)))
              (i32.const 2)
              (br 3)
            )
            (i32.const 3)
            (br 3)
          )
        )
        (i32.const 5)
      )
      (i32.mul)
    )
  )
  (func $10
    (type 1)
    (block
      (block (block (local.get 0) (br_table 0 1) (br 2)) (i32.const 0) (return))
    )
    (i32.const 2)
  )
  (func $11
    (type 0)
    (local i32)
    (i32.const 0)
    (local.set 0)
    (block
      (result i32)
      (block
        (i32.const 0)
        (br_if 0)
        (local.get 0)
        (i32.const 1)
        (i32.or)
        (local.set 0)
        (i32.const 1)
        (br_if 0)
        (local.get 0)
        (i32.const 2)
        (i32.or)
        (local.set 0)
      )
      (block
        (result i32)
        (local.get 0)
        (i32.const 4)
        (i32.or)
        (local.set 0)
        (local.get 0)
      )
      (i32.const 0)
      (br_if 0)
      (drop)
      (local.get 0)
      (i32.const 8)
      (i32.or)
      (local.set 0)
      (block
        (result i32)
        (local.get 0)
        (i32.const 16)
        (i32.or)
        (local.set 0)
        (local.get 0)
      )
      (i32.const 1)
      (br_if 0)
      (drop)
      (local.get 0)
      (i32.const 32)
      (i32.or)
      (local.set 0)
      (local.get 0)
    )
  )
  (func $12
    (type 0)
    (block
      (result i32)
      (block (result i32) (i32.const 1) (br 0))
      (i32.const 1)
      (br_if 0)
      (drop)
      (i32.const 0)
    )
  )
  (func $13
    (type 0)
    (block
      (result i32)
      (i32.const 1)
      (if
        (then
          (block (result i32) (i32.const 1) (br 0))
          (i32.const 1)
          (br_if 1)
          (drop)
        )
        (else)
      )
      (i32.const 0)
    )
  )
  (func $14
    (type 0)
    (local i32)
    (block
      (result i32)
      (block (result i32) (i32.const 1) (local.set 0) (local.get 0))
      (block (result i32) (i32.const 2) (local.set 0) (local.get 0))
      (br_if 0)
      (drop)
      (i32.const 0)
    )
    (i32.const 0)
    (i32.add)
    (drop)
    (local.get 0)
  )
  (func $15
    (type 0)
    (block
      (result i32)
      (i32.const 1)
      (if
        (then (block (result i32) (i32.const 1) (br 0)) (br 1))
        (else (block (block (result i32) (i32.const 1) (br 0)) (drop)))
      )
      (i32.const 1)
    )
  )
  (func $16
    (type 0)
    (block (result i32) (i32.const 1) (br 0) (i32.const 2) (i32.xor))
  )
  (func $17
    (type 0)
    (block
      (result i32)
      (block (result i32) (i32.const 2))
      (block (result i32) (i32.const 3) (br 0))
      (i32.add)
    )
  )
  (export "block" (func 0))
  (export "loop1" (func 1))
  (export "loop2" (func 2))
  (export "loop3" (func 3))
  (export "loop4" (func 4))
  (export "loop5" (func 5))
  (export "loop6" (func 6))
  (export "if" (func 7))
  (export "if2" (func 8))
  (export "switch" (func 9))
  (export "return" (func 10))
  (export "br_if0" (func 11))
  (export "br_if1" (func 12))
  (export "br_if2" (func 13))
  (export "br_if3" (func 14))
  (export "br" (func 15))
  (export "shadowing" (func 16))
  (export "redefinition" (func 17))
)
(assert_return (invoke "block") (i32.const 1))
(assert_return (invoke "loop1") (i32.const 5))
(assert_return (invoke "loop2") (i32.const 8))
(assert_return (invoke "loop3") (i32.const 1))
(assert_return (invoke "loop4" (i32.const 8)) (i32.const 16))
(assert_return (invoke "loop5") (i32.const 2))
(assert_return (invoke "loop6") (i32.const 3))
(assert_return (invoke "if") (i32.const 5))
(assert_return (invoke "if2") (i32.const 5))
(assert_return (invoke "switch" (i32.const 0)) (i32.const 50))
(assert_return (invoke "switch" (i32.const 1)) (i32.const 20))
(assert_return (invoke "switch" (i32.const 2)) (i32.const 20))
(assert_return (invoke "switch" (i32.const 3)) (i32.const 3))
(assert_return (invoke "switch" (i32.const 4)) (i32.const 50))
(assert_return (invoke "switch" (i32.const 5)) (i32.const 50))
(assert_return (invoke "return" (i32.const 0)) (i32.const 0))
(assert_return (invoke "return" (i32.const 1)) (i32.const 2))
(assert_return (invoke "return" (i32.const 2)) (i32.const 2))
(assert_return (invoke "br_if0") (i32.const 29))
(assert_return (invoke "br_if1") (i32.const 1))
(assert_return (invoke "br_if2") (i32.const 1))
(assert_return (invoke "br_if3") (i32.const 2))
(assert_return (invoke "br") (i32.const 1))
(assert_return (invoke "shadowing") (i32.const 1))
(assert_return (invoke "redefinition") (i32.const 5))
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (block (i32.const 1) (br_if 0) (f32.neg) (nop)))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (block (f32.const 0) (i32.const 1) (br_if 0)))
  )
  "type mismatch"
)
(assert_invalid
  (module
    (type $0 (func))
    (func $0 (type 0) (block (f32.const 0) (i32.const 1) (br_if 0)))
  )
  "type mismatch"
)
