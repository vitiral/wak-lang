(module $Mf
  (type $0 (func (result i32)))
  (func $0 (type 0) (call 1))
  (func $1 (type 0) (i32.const 2))
  (export "call" (func 0))
)
(register "Mf" $Mf)
(module $Nf
  (type $0 (func (result i32)))
  (import "Mf" "call" (func $0 (type 0)))
  (func $1 (type 0) (call 0))
  (func $2 (type 0) (call 3))
  (func $3 (type 0) (i32.const 3))
  (export "Mf.call" (func 0))
  (export "call Mf.call" (func 1))
  (export "call" (func 2))
)
(assert_return (invoke $Mf "call") (i32.const 2))
(assert_return (invoke $Nf "Mf.call") (i32.const 2))
(assert_return (invoke $Nf "call") (i32.const 3))
(assert_return (invoke $Nf "call Mf.call") (i32.const 2))
(module
  (type $0 (func (param i32)))
  (import "spectest" "print_i32" (func $0 (type 0)))
  (export "print" (func 0))
)
(register "reexport_f")
(assert_unlinkable
  (module
    (type $0 (func (param i64)))
    (import "reexport_f" "print" (func $0 (type 0)))
  )
  "incompatible import type"
)
(assert_unlinkable
  (module
    (type $0 (func (param i32) (result i32)))
    (import "reexport_f" "print" (func $0 (type 0)))
  )
  "incompatible import type"
)
(module $Mg
  (type $0 (func (result i32)))
  (type $1 (func (param i32)))
  (global $0 i32 (i32.const 42))
  (global $1 (mut i32) (i32.const 142))
  (func $0 (type 0) (global.get 0))
  (func $1 (type 0) (global.get 1))
  (func $2 (type 1) (local.get 0) (global.set 1))
  (export "glob" (global 0))
  (export "get" (func 0))
  (export "mut_glob" (global 1))
  (export "get_mut" (func 1))
  (export "set_mut" (func 2))
)
(register "Mg" $Mg)
(module $Ng
  (type $0 (func (result i32)))
  (type $1 (func (param i32)))
  (import "Mg" "glob" (global $0 i32))
  (import "Mg" "mut_glob" (global $1 (mut i32)))
  (import "Mg" "get" (func $0 (type 0)))
  (import "Mg" "get_mut" (func $1 (type 0)))
  (import "Mg" "set_mut" (func $2 (type 1)))
  (global $2 i32 (i32.const 43))
  (func $3 (type 0) (global.get 2))
  (export "Mg.glob" (global 0))
  (export "Mg.get" (func 0))
  (export "glob" (global 2))
  (export "get" (func 3))
  (export "Mg.mut_glob" (global 1))
  (export "Mg.get_mut" (func 1))
  (export "Mg.set_mut" (func 2))
)
(assert_return (get $Mg "glob") (i32.const 42))
(assert_return (get $Ng "Mg.glob") (i32.const 42))
(assert_return (get $Ng "glob") (i32.const 43))
(assert_return (invoke $Mg "get") (i32.const 42))
(assert_return (invoke $Ng "Mg.get") (i32.const 42))
(assert_return (invoke $Ng "get") (i32.const 43))
(assert_return (get $Mg "mut_glob") (i32.const 142))
(assert_return (get $Ng "Mg.mut_glob") (i32.const 142))
(assert_return (invoke $Mg "get_mut") (i32.const 142))
(assert_return (invoke $Ng "Mg.get_mut") (i32.const 142))
(assert_return (invoke $Mg "set_mut" (i32.const 241)))
(assert_return (get $Mg "mut_glob") (i32.const 241))
(assert_return (get $Ng "Mg.mut_glob") (i32.const 241))
(assert_return (invoke $Mg "get_mut") (i32.const 241))
(assert_return (invoke $Ng "Mg.get_mut") (i32.const 241))
(assert_unlinkable
  (module (import "Mg" "mut_glob" (global $0 i32)))
  "incompatible import type"
)
(assert_unlinkable
  (module (import "Mg" "glob" (global $0 (mut i32))))
  "incompatible import type"
)
(module $Mt
  (type $0 (func (result i32)))
  (type $1 (func))
  (type $2 (func (param i32) (result i32)))
  (table $0 10 funcref)
  (func $0 (type 0) (i32.const 4))
  (func $1 (type 0) (i32.const -4))
  (func $2 (type 2) (local.get 0) (call_indirect (type 0)))
  (export "tab" (table 0))
  (export "h" (func 1))
  (export "call" (func 2))
  (elem 0 (offset (i32.const 2)) 0 0 0 0)
)
(register "Mt" $Mt)
(module $Nt
  (type $0 (func))
  (type $1 (func (result i32)))
  (type $2 (func (param i32) (result i32)))
  (import "Mt" "call" (func $0 (type 2)))
  (import "Mt" "h" (func $1 (type 1)))
  (table $0 5 5 funcref)
  (func $2 (type 1) (i32.const 5))
  (func $3 (type 2) (local.get 0) (call 0))
  (func $4 (type 2) (local.get 0) (call_indirect (type 1)))
  (export "Mt.call" (func 0))
  (export "call Mt.call" (func 3))
  (export "call" (func 4))
  (elem 0 (offset (i32.const 0)) 2 2 2 1 0)
)
(assert_return (invoke $Mt "call" (i32.const 2)) (i32.const 4))
(assert_return (invoke $Nt "Mt.call" (i32.const 2)) (i32.const 4))
(assert_return (invoke $Nt "call" (i32.const 2)) (i32.const 5))
(assert_return (invoke $Nt "call Mt.call" (i32.const 2)) (i32.const 4))
(assert_trap (invoke $Mt "call" (i32.const 1)) "uninitialized")
(assert_trap (invoke $Nt "Mt.call" (i32.const 1)) "uninitialized")
(assert_return (invoke $Nt "call" (i32.const 1)) (i32.const 5))
(assert_trap (invoke $Nt "call Mt.call" (i32.const 1)) "uninitialized")
(assert_trap (invoke $Mt "call" (i32.const 0)) "uninitialized")
(assert_trap (invoke $Nt "Mt.call" (i32.const 0)) "uninitialized")
(assert_return (invoke $Nt "call" (i32.const 0)) (i32.const 5))
(assert_trap (invoke $Nt "call Mt.call" (i32.const 0)) "uninitialized")
(assert_trap (invoke $Mt "call" (i32.const 20)) "undefined")
(assert_trap (invoke $Nt "Mt.call" (i32.const 20)) "undefined")
(assert_trap (invoke $Nt "call" (i32.const 7)) "undefined")
(assert_trap (invoke $Nt "call Mt.call" (i32.const 20)) "undefined")
(assert_return (invoke $Nt "call" (i32.const 3)) (i32.const -4))
(assert_trap (invoke $Nt "call" (i32.const 4)) "indirect call")
(module $Ot
  (type $0 (func (result i32)))
  (type $1 (func (param i32) (result i32)))
  (import "Mt" "h" (func $0 (type 0)))
  (import "Mt" "tab" (table $0 5 funcref))
  (func $1 (type 0) (i32.const 6))
  (func $2 (type 1) (local.get 0) (call_indirect (type 0)))
  (export "call" (func 2))
  (elem 0 (offset (i32.const 1)) 1 0)
)
(assert_return (invoke $Mt "call" (i32.const 3)) (i32.const 4))
(assert_return (invoke $Nt "Mt.call" (i32.const 3)) (i32.const 4))
(assert_return (invoke $Nt "call Mt.call" (i32.const 3)) (i32.const 4))
(assert_return (invoke $Ot "call" (i32.const 3)) (i32.const 4))
(assert_return (invoke $Mt "call" (i32.const 2)) (i32.const -4))
(assert_return (invoke $Nt "Mt.call" (i32.const 2)) (i32.const -4))
(assert_return (invoke $Nt "call" (i32.const 2)) (i32.const 5))
(assert_return (invoke $Nt "call Mt.call" (i32.const 2)) (i32.const -4))
(assert_return (invoke $Ot "call" (i32.const 2)) (i32.const -4))
(assert_return (invoke $Mt "call" (i32.const 1)) (i32.const 6))
(assert_return (invoke $Nt "Mt.call" (i32.const 1)) (i32.const 6))
(assert_return (invoke $Nt "call" (i32.const 1)) (i32.const 5))
(assert_return (invoke $Nt "call Mt.call" (i32.const 1)) (i32.const 6))
(assert_return (invoke $Ot "call" (i32.const 1)) (i32.const 6))
(assert_trap (invoke $Mt "call" (i32.const 0)) "uninitialized")
(assert_trap (invoke $Nt "Mt.call" (i32.const 0)) "uninitialized")
(assert_return (invoke $Nt "call" (i32.const 0)) (i32.const 5))
(assert_trap (invoke $Nt "call Mt.call" (i32.const 0)) "uninitialized")
(assert_trap (invoke $Ot "call" (i32.const 0)) "uninitialized")
(assert_trap (invoke $Ot "call" (i32.const 20)) "undefined")
(module
  (type $0 (func))
  (import "Mt" "tab" (table $0 0 funcref))
  (func $0 (type 0))
  (elem 0 (offset (i32.const 9)) 0)
)
(module $G1 (global $0 i32 (i32.const 5)) (export "g" (global 0)))
(register "G1" $G1)
(module $G2
  (import "G1" "g" (global $0 i32))
  (global $1 i32 (global.get 0))
  (export "g" (global 1))
)
(assert_return (get $G2 "g") (i32.const 5))
(assert_unlinkable
  (module
    (type $0 (func))
    (import "Mt" "tab" (table $0 0 funcref))
    (func $0 (type 0))
    (elem 0 (offset (i32.const 10)) 0)
  )
  "elements segment does not fit"
)
(assert_unlinkable
  (module
    (type $0 (func (result i32)))
    (import "Mt" "tab" (table $0 10 funcref))
    (import "Mt" "mem" (memory $0 1))
    (func $0 (type 0) (i32.const 0))
    (elem 0 (offset (i32.const 7)) 0)
    (elem 0 (offset (i32.const 9)) 0)
  )
  "unknown import"
)
(assert_trap (invoke $Mt "call" (i32.const 7)) "uninitialized")
(assert_unlinkable
  (module
    (type $0 (func (result i32)))
    (import "Mt" "tab" (table $0 10 funcref))
    (func $0 (type 0) (i32.const 0))
    (elem 0 (offset (i32.const 7)) 0)
    (elem 0 (offset (i32.const 12)) 0)
  )
  "elements segment does not fit"
)
(assert_trap (invoke $Mt "call" (i32.const 7)) "uninitialized")
(assert_unlinkable
  (module
    (type $0 (func (result i32)))
    (import "Mt" "tab" (table $0 10 funcref))
    (memory $0 1)
    (func $0 (type 0) (i32.const 0))
    (elem 0 (offset (i32.const 7)) 0)
    (data 0 (offset (i32.const 65_536)) "\64")
  )
  "data segment does not fit"
)
(assert_trap (invoke $Mt "call" (i32.const 7)) "uninitialized")
(module $Mm
  (type $0 (func (param i32) (result i32)))
  (memory $0 1 5)
  (func $0 (type 0) (local.get 0) (i32.load8_u))
  (export "mem" (memory 0))
  (export "load" (func 0))
  (data 0 (offset (i32.const 10)) "\00\01\02\03\04\05\06\07\08\09")
)
(register "Mm" $Mm)
(module $Nm
  (type $0 (func (param i32) (result i32)))
  (import "Mm" "load" (func $0 (type 0)))
  (memory $0 1)
  (func $1 (type 0) (local.get 0) (i32.load8_u))
  (export "Mm.load" (func 0))
  (export "load" (func 1))
  (data 0 (offset (i32.const 10)) "\f0\f1\f2\f3\f4\f5")
)
(assert_return (invoke $Mm "load" (i32.const 12)) (i32.const 2))
(assert_return (invoke $Nm "Mm.load" (i32.const 12)) (i32.const 2))
(assert_return (invoke $Nm "load" (i32.const 12)) (i32.const 242))
(module $Om
  (type $0 (func (param i32) (result i32)))
  (import "Mm" "mem" (memory $0 1))
  (func $0 (type 0) (local.get 0) (i32.load8_u))
  (export "load" (func 0))
  (data 0 (offset (i32.const 5)) "\a0\a1\a2\a3\a4\a5\a6\a7")
)
(assert_return (invoke $Mm "load" (i32.const 12)) (i32.const 167))
(assert_return (invoke $Nm "Mm.load" (i32.const 12)) (i32.const 167))
(assert_return (invoke $Nm "load" (i32.const 12)) (i32.const 242))
(assert_return (invoke $Om "load" (i32.const 12)) (i32.const 167))
(module
  (import "Mm" "mem" (memory $0 0))
  (data 0 (offset (i32.const 65_535)) "\61")
)
(assert_unlinkable
  (module
    (import "Mm" "mem" (memory $0 0))
    (data 0 (offset (i32.const 65_536)) "\61")
  )
  "data segment does not fit"
)
(module $Pm
  (type $0 (func (param i32) (result i32)))
  (import "Mm" "mem" (memory $0 1 8))
  (func $0 (type 0) (local.get 0) (memory.grow))
  (export "grow" (func 0))
)
(assert_return (invoke $Pm "grow" (i32.const 0)) (i32.const 1))
(assert_return (invoke $Pm "grow" (i32.const 2)) (i32.const 1))
(assert_return (invoke $Pm "grow" (i32.const 0)) (i32.const 3))
(assert_return (invoke $Pm "grow" (i32.const 1)) (i32.const 3))
(assert_return (invoke $Pm "grow" (i32.const 1)) (i32.const 4))
(assert_return (invoke $Pm "grow" (i32.const 0)) (i32.const 5))
(assert_return (invoke $Pm "grow" (i32.const 1)) (i32.const -1))
(assert_return (invoke $Pm "grow" (i32.const 0)) (i32.const 5))
(assert_unlinkable
  (module
    (type $0 (func))
    (import "spectest" "print" (func $0 (type 0)))
    (import "Mm" "mem" (memory $0 1))
    (import "Mm" "tab" (table $0 0 funcref))
    (data 0 (offset (i32.const 0)) "\61\62\63")
  )
  "unknown import"
)
(assert_return (invoke $Mm "load" (i32.const 0)) (i32.const 0))
(assert_unlinkable
  (module
    (import "Mm" "mem" (memory $0 1))
    (data 0 (offset (i32.const 0)) "\61\62\63")
    (data 0 (offset (i32.const 327_680)) "\64")
  )
  "data segment does not fit"
)
(assert_return (invoke $Mm "load" (i32.const 0)) (i32.const 0))
(assert_unlinkable
  (module
    (type $0 (func))
    (import "Mm" "mem" (memory $0 1))
    (table $0 0 funcref)
    (func $0 (type 0))
    (elem 0 (offset (i32.const 0)) 0)
    (data 0 (offset (i32.const 0)) "\61\62\63")
  )
  "elements segment does not fit"
)
(assert_return (invoke $Mm "load" (i32.const 0)) (i32.const 0))
(module $Ms
  (type $0 (func (result i32)))
  (table $0 1 funcref)
  (memory $0 1)
  (func $0 (type 0) (i32.const 0) (i32.load8_u))
  (func $1 (type 0) (i32.const 0) (call_indirect (type 0)))
  (export "memory" (memory 0))
  (export "table" (table 0))
  (export "get memory[0]" (func 0))
  (export "get table[0]" (func 1))
)
(register "Ms" $Ms)
(assert_trap
  (module
    (type $0 (func (result i32)))
    (type $1 (func))
    (import "Ms" "memory" (memory $0 1))
    (import "Ms" "table" (table $0 1 funcref))
    (func $0 (type 0) (i32.const 57_005))
    (func $1 (type 1) (unreachable))
    (start 1)
    (elem 0 (offset (i32.const 0)) 0)
    (data 0 (offset (i32.const 0)) "\68\65\6c\6c\6f")
  )
  "unreachable"
)
(assert_return (invoke $Ms "get memory[0]") (i32.const 104))
(assert_return (invoke $Ms "get table[0]") (i32.const 57_005))
